{"version":3,"file":"rx-collection-helper.js","names":["createRevision","getDefaultRevision","getDefaultRxDocumentMeta","now","fillPrimaryKey","runAsyncPluginHooks","getAllCollectionDocuments","flatCloneDocWithMeta","fillObjectDataBeforeInsert","schema","data","useJson","fillObjectWithDefaults","primaryPath","jsonSchema","_meta","hasOwnProperty","_deleted","_attachments","_rev","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","multiInstance","storage","createStorageInstance","storageInstance","removeCollectionStorages","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","hashFunction","statics","allCollectionMetaDocs","relevantCollectionMetaDocs","filter","metaDoc","name","removeStorages","forEach","push","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","options","remove","writeRows","doc","writeDoc","lwt","previous","document","bulkWrite"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    HashFunction,\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    createRevision,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now\n} from './plugins/utils';\nimport {\n    fillPrimaryKey\n} from './rx-schema-helper';\nimport type { RxSchema } from './rx-schema';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    let useJson = schema.fillObjectWithDefaults(data);\n    useJson = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        useJson\n    );\n    useJson._meta = getDefaultRxDocumentMeta();\n    if (!useJson.hasOwnProperty('_deleted')) {\n        useJson._deleted = false;\n    }\n    if (!useJson.hasOwnProperty('_attachments')) {\n        useJson._attachments = {};\n    }\n    if (!useJson.hasOwnProperty('_rev')) {\n        useJson._rev = getDefaultRevision();\n    }\n    return useJson;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string,\n    /**\n     * If no hash function is provided,\n     * we assume that the whole internal store is removed anyway\n     * so we do not have to delete the meta documents.\n     */\n    hashFunction?: HashFunction,\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    if (hashFunction) {\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\n            const writeDoc = flatCloneDocWithMeta(doc);\n            writeDoc._deleted = true;\n            writeDoc._meta.lwt = now();\n            writeDoc._rev = createRevision(\n                databaseInstanceToken,\n                doc\n            );\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        await databaseInternalStorage.bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        );\n    }\n}\n"],"mappings":"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"}