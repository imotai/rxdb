{"version":3,"file":"rx-collection.js","names":["filter","mergeMap","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","getDefaultRxDocumentMeta","getDefaultRevision","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","removeCollectionStorages","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocumentCache","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createNewRxDocument","getWrappedStorageInstance","storageChangeEventToRxChangeEvent","throwIfIsStorageWriteError","defaultConflictHandler","IncrementalWriteQueue","beforeDocumentUpdateWrite","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","_changeEventBuffer","onDestroy","destroyed","_applyHookFunctions","asRxCollection","prepare","jsonSchema","primaryPath","newData","oldData","result","_runHooks","eventBulks$","pipe","changeEventBulk","collectionName","events","cE","isLocal","docData","storageToken","databaseStorageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","databaseToken","token","checkpoint","context","$emit","push","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","insert","json","useJson","bulkInsert","writeResult","isError","error","insertResult","success","docsData","length","useDocs","useDocData","hasHooks","Promise","all","doc","docs","docsMap","insertRows","set","Object","assign","_attachments","_meta","_rev","_deleted","row","document","bulkWrite","results","successDocData","values","rxDocuments","writtenDocData","getCachedRxDocument","get","primary","bulkRemove","ids","findByIds","exec","rxDocumentMap","Array","from","forEach","rxDocument","data","toMutableJSON","removeDocs","writeDoc","previous","successIds","keys","bulkUpsert","insertData","useJsonByDocId","ret","slice","status","collection","writeError","documentId","writeData","docDataInDb","documentInDb","incrementalModify","newDoc","updatedDocs","concat","upsert","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","find","queryObj","query","findOne","selector","limit","isArray","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","syncGraphQL","_options","syncCouchDB","_syncOptions","syncP2P","syncFirestore","addHook","when","key","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","_runHooksSync","promiseWait","time","res","timeout","setTimeout","add","destroy","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","remove","storage","internalStore","hashFunction","operation","colProto","getPrototypeOf","fnName","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","entries","funName","defineProperty","version","creator","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision\n} from './plugins/utils';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocumentCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    MigrationState,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\nimport type {\n    RxCouchDBReplicationState,\n    SyncOptionsCouchDB\n} from './plugins/replication-couchdb';\nimport type {\n    SyncOptionsP2P,\n    RxP2PReplicationPool\n} from './plugins/replication-p2p';\nimport type {\n    RxFirestoreReplicationState,\n    SyncOptionsFirestore\n} from './plugins/replication-firestore';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createNewRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\nimport { IncrementalWriteQueue } from './incremental-write';\nimport { beforeDocumentUpdateWrite } from './rx-document';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; }\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.$.pipe(filter(cE => !cE.isLocal)),\n            docData => createNewRxDocument(this.asRxCollection, docData)\n        );\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n\n        // TODO do we need fillObjectDataBeforeInsert() here because it is also run at bulkInsert() later\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = this.hasHooks('pre', 'insert') ?\n            await Promise.all(\n                useDocs.map(doc => {\n                    return this._runHooks('pre', 'insert', doc)\n                        .then(() => {\n                            return doc;\n                        });\n                })\n            ) : useDocs;\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const docData = Object.assign(doc, {\n                _attachments: {},\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _deleted: false\n            });\n            const row: BulkWriteRow<RxDocumentType> = { document: docData };\n            return row;\n        });\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const successDocData: RxDocumentData<RxDocumentType>[] = Object.values(results.success);\n        const rxDocuments: any[] = successDocData\n            .map((writtenDocData) => this._docCache.getCachedRxDocument(writtenDocData));\n\n        if (this.hasHooks('post', 'insert')) {\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids).exec();\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(async (error) => {\n                if (error.status !== 409) {\n                    throw newRxError('VD2', {\n                        collection: this.name,\n                        writeError: error\n                    });\n                }\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = this._docCache.getCachedRxDocument(docDataInDb);\n                const newDoc = await doc.incrementalModify(() => writeData);\n                return newDoc;\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number\n    > {\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<RxDocumentType, Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL<CheckpointType = any>(_options: SyncOptionsGraphQL<RxDocumentType, CheckpointType>): RxGraphQLReplicationState<RxDocumentType, CheckpointType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    syncCouchDB(_syncOptions: SyncOptionsCouchDB<RxDocumentType>): RxCouchDBReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-couchdb');\n    }\n\n    syncP2P(_syncOptions: SyncOptionsP2P<RxDocumentType>): RxP2PReplicationPool<RxDocumentType> {\n        throw pluginMissing('replication-p2p');\n    }\n    syncFirestore(_syncOptions: SyncOptionsFirestore<RxDocumentType>): RxFirestoreReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-firestore');\n    }\n\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocument(docDataFromCache),\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}