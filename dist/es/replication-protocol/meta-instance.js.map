{"version":3,"file":"meta-instance.js","names":["fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","flatCloneDocWithMeta","getDefaultRevision","createRevision","now","RX_REPLICATION_META_INSTANCE_SCHEMA","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","replicationIdentifier","isCheckpoint","itemId","data","isResolvedConflict","required","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","checkpointKey","then","metaDocs","ret","Object","values","forEach","metaDoc","docData","metaDocument","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","_attachments","_deleted","_rev","_meta","lwt","identifier","document"],"sources":["../../../src/replication-protocol/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport { getDefaultRevision, createRevision, now } from '../plugins/utils';\n\nexport const RX_REPLICATION_META_INSTANCE_SCHEMA: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings({\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'replicationIdentifier',\n            'itemId',\n            'isCheckpoint'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    version: 0,\n    additionalProperties: false,\n    properties: {\n        id: {\n            type: 'string',\n            minLength: 1,\n            maxLength: 100\n        },\n        replicationIdentifier: {\n            type: 'string'\n        },\n        isCheckpoint: {\n            type: 'string',\n            enum: [\n                '0',\n                '1'\n            ],\n            maxLength: 1\n        },\n        itemId: {\n            type: 'string'\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        },\n        isResolvedConflict: {\n            type: 'string'\n        }\n    },\n    required: [\n        'id',\n        'replicationIdentifier',\n        'isCheckpoint',\n        'itemId',\n        'data'\n    ]\n});\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n        docData: WithDeleted<RxDocType>;\n        metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n    }>> {\n    return state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                RX_REPLICATION_META_INSTANCE_SCHEMA,\n                {\n                    itemId: docId,\n                    replicationIdentifier: state.checkpointKey,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    ).then(metaDocs => {\n        const ret: {\n            [docId: string]: {\n                docData: RxDocumentData<RxDocType>;\n                metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n            };\n        } = {};\n        Object\n            .values(metaDocs)\n            .forEach((metaDoc) => {\n                ret[metaDoc.itemId] = {\n                    docData: metaDoc.data,\n                    metaDocument: metaDoc\n                };\n            });\n\n        return ret;\n    });\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>,\n    isResolvedConflict?: string\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        replicationIdentifier: state.checkpointKey,\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta.isResolvedConflict = isResolvedConflict;\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        newMeta\n    );\n    newMeta._rev = createRevision(\n        state.input.identifier,\n        previous\n    );\n    return {\n        previous,\n        document: newMeta\n    };\n}\n"],"mappings":"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"}