{"version":3,"file":"downstream.js","names":["firstValueFrom","filter","newRxError","stackCheckpoints","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","parseRevision","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","getLastCheckpointDoc","setCheckpoint","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","startReplicationDownstream","state","replicationHandler","input","timer","openTasks","addNewTask","task","stats","down","taskWithTime","time","push","streamQueue","then","useTasks","length","events","active","next","innerTaskWithTime","shift","lastTimeMasterChangesRequested","downstreamResyncOnce","downstreamProcessChanges","firstSyncDone","getValue","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","canceled","pipe","unsubscribe","checkpointQueue","lastCheckpoint","promises","masterChangesSince","pullBatchSize","downResult","documents","checkpoint","persistFromMaster","Promise","all","tasks","docsOfAllTasks","forEach","Error","concat","persistenceQueue","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","forkInstance","findDocumentsById","currentForkState","assumedMasterState","map","forkStateFullDoc","forkStateDocData","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkStatePromise","conflictHandler","realMasterState","newDocumentState","r","isEqual","isAssumedMasterEqualToForkState","_meta","identifier","height","areStatesExactlyEqualPromise","areStatesExactlyEqual","newForkState","assign","_attachments","nextRevisionHeight","forkWriteRow","previous","document","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed","values","error","status","writeError","metaInstance","unhandledError"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport { newRxError } from '../rx-error';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint\n} from '../types';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const innerTaskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull\n                     * from the master, then we can drop the task.\n                     */\n                    if (innerTaskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (innerTaskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(innerTaskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(innerTaskWithTime.task);\n                }\n\n                if (useTasks.length === 0) return;\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            }).then(() => {\n                state.events.active.down.next(false);\n                if (!state.firstSyncDone.down.getValue()) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n\n            /**\n             * By definition we stop pull when the pulled documents\n             * do not fill up the pullBatchSize because we\n             * can assume that the remote has no more documents.\n             */\n            if (downResult.documents.length < state.input.pullBatchSize) {\n                break;\n            }\n\n        }\n        await Promise.all(promises);\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        let docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            docsOfAllTasks = docsOfAllTasks.concat(task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkState,\n                assumedMasterState\n            ]) => {\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                        const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        if (\n                            assumedMaster &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        const isAssumedMasterEqualToForkStatePromise = !assumedMaster || !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: assumedMaster.docData,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-0').then(r => r.isEqual);\n                        let isAssumedMasterEqualToForkState = await isAssumedMasterEqualToForkStatePromise;\n\n                        if (\n                            !isAssumedMasterEqualToForkState &&\n                            (\n                                assumedMaster &&\n                                (assumedMaster.docData as any)._rev &&\n                                forkStateFullDoc._meta[state.input.identifier] &&\n                                parseRevision(forkStateFullDoc._rev).height === forkStateFullDoc._meta[state.input.identifier]\n                            )\n                        ) {\n                            isAssumedMasterEqualToForkState = true;\n                        }\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const areStatesExactlyEqualPromise = !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: masterState,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-1').then(r => r.isEqual);\n                        const areStatesExactlyEqual = await areStatesExactlyEqualPromise;\n\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             *\n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                useMetaWriteRows.push(\n                                    getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: getDefaultRxDocumentMeta(),\n                                _rev: getDefaultRevision(),\n                                _attachments: {}\n                            });\n\n                        /**\n                         * If the remote works with revisions,\n                         * we store the height of the next fork-state revision\n                         * inside of the documents meta data.\n                         * By doing so we can filter it out in the upstream\n                         * and detect the document as being equal to master or not.\n                         * This is used for example in the CouchDB replication plugin.\n                         */\n                        if ((masterState as any)._rev) {\n                            const nextRevisionHeight = !forkStateFullDoc ? 1 : parseRevision(forkStateFullDoc._rev).height + 1;\n                            newForkState._meta[state.input.identifier] = nextRevisionHeight;\n                        }\n\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                    })\n                );\n            }).then(() => {\n                if (writeRowsToFork.length > 0) {\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        Object.keys(forkWriteResult.success).forEach((docId) => {\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                        Object.values(forkWriteResult.error).forEach(error => {\n                            /**\n                             * We do not have to care about downstream conflict errors here\n                             * because on conflict, it will be solved locally and result in another write.\n                             */\n                            if (error.status === 409) {\n                                return;\n                            }\n                            // other non-conflict errors must be handled\n                            state.events.error.next(newRxError('RC_PULL', {\n                                writeError: error\n                            }));\n                        });\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        useMetaWriteRows,\n                        'replication-down-write-meta'\n                    );\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                ));\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}