{"version":3,"file":"index.js","names":["BehaviorSubject","combineLatest","filter","firstValueFrom","map","Subject","getPrimaryFieldOfPrimaryKey","ensureNotFalsy","PROMISE_RESOLVE_VOID","getCheckpointKey","startReplicationDownstream","docStateToWriteDoc","writeDocToDocState","startReplicationUpstream","replicateRxStorageInstance","input","checkpointKey","state","primaryPath","forkInstance","schema","primaryKey","downstreamBulkWriteFlag","events","canceled","active","down","up","processed","resolvedConflicts","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","streamQueue","checkpointQueue","lastCheckpointDoc","awaitRxStorageReplicationFirstInSync","pipe","v","then","awaitRxStorageReplicationInSync","replicationState","Promise","all","awaitRxStorageReplicationIdle","rxStorageInstanceToReplicationHandler","instance","conflictHandler","databaseInstanceToken","replicationHandler","masterChangeStream$","changeStream","eventBulk","ret","checkpoint","documents","event","documentData","masterChangesSince","batchSize","getChangedDocumentsSince","result","length","d","masterWrite","rows","rowById","forEach","row","docId","newDocumentState","ids","Object","keys","findDocumentsById","masterDocsState","conflicts","writeRows","entries","id","masterState","push","document","assumedMasterState","realMasterState","isEqual","previous","bulkWrite","values","err","status","Error","documentInDb","cancelRxStorageReplication","next","complete"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\n * These files contain the replication protocol.\n * It can be used to replicated RxStorageInstances or RxCollections\n * or even to do a client(s)-server replication.\n */\n\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    map,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    DocumentsWithCheckpoint,\n    RxConflictHandler,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils';\nimport {\n    getCheckpointKey\n} from './checkpoint';\nimport { startReplicationDownstream } from './downstream';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper';\nimport { startReplicationUpstream } from './upstream';\n\n\nexport * from './checkpoint';\nexport * from './downstream';\nexport * from './upstream';\nexport * from './meta-instance';\nexport * from './conflicts';\nexport * from './helper';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKey = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        input,\n        checkpointKey,\n        downstreamBulkWriteFlag: 'replication-downstream-' + checkpointKey,\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject(),\n            error: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        checkpointQueue: PROMISE_RESOLVE_VOID,\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    ).then(() => { });\n}\n\nexport function awaitRxStorageReplicationInSync(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    return Promise.all([\n        replicationState.streamQueue.up,\n        replicationState.streamQueue.down,\n        replicationState.checkpointQueue\n    ]);\n}\n\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>,\n    databaseInstanceToken: string\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            map(eventBulk => {\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\n                    checkpoint: eventBulk.checkpoint,\n                    documents: eventBulk.events.map(event => {\n                        return writeDocToDocState(ensureNotFalsy(event.documentData) as any);\n                    })\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            batchSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                batchSize,\n                checkpoint\n            ).then(result => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documents: result.documents.map(d => writeDocToDocState(d))\n                };\n            });\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsState = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState[id];\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(databaseInstanceToken, row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(databaseInstanceToken, row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState));\n                        }\n                    })\n            );\n\n\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                Object\n                    .values(result.error)\n                    .forEach(err => {\n                        if (err.status !== 409) {\n                            throw new Error('non conflict error');\n                        } else {\n                            conflicts.push(\n                                writeDocToDocState(ensureNotFalsy(err.documentInDb))\n                            );\n                        }\n                    });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    replicationState.events.canceled.next(true);\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n    replicationState.events.canceled.complete();\n}\n"],"mappings":"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"}