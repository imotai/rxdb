{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","defaultHashFunction","ensureNotFalsy","firstPropertyValueOfObject","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","randomCouchString","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","writeSingle","instance","writeRow","context","bulkWrite","writeResult","Object","keys","error","length","ret","success","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","writeError","data","getNewestOfDocumentStates","primaryPath","docs","forEach","_meta","lwt","categorizeBulkWriteRows","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","docsByIdIsMap","get","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","revInDb","_rev","err","updatedRow","find","previousAttachmentData","newDigest","digest","writeDoc","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","docId","binaryValues","binary","map","v","join","eventKey","databaseName","getWrappedStorageInstance","database","rxJsonSchema","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","metaFieldName","hasOwnProperty","dataBefore","dataAfter","token","originalStorageInstance","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    ById,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment\n} from './types';\nimport {\n    createRevision,\n    defaultHashFunction,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * From a list of documents,\n * it will return the document that has the 'newest' state\n * which must be used to create the correct checkpoint\n * for the whole list.\n */\nexport function getNewestOfDocumentStates<RxDocType>(\n    primaryPath: string,\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n    let ret: RxDocumentData<RxDocType> | null = null;\n    docs.forEach(doc => {\n        if (\n            !ret ||\n            doc._meta.lwt > ret._meta.lwt ||\n            (\n                doc._meta.lwt === ret._meta.lwt &&\n                (doc as any)[primaryPath] > (ret as any)[primaryPath]\n            )\n        ) {\n            ret = doc;\n        }\n\n    });\n    return ensureNotFalsy(ret as any);\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This can be a Map for better performance\n     * but it can also be an object because some storages\n     * need to work with something that is JSON-stringify-able\n     * and we do not want to transform a big object into a Map\n     * each time we use it.\n     */\n    docsInDb:\n        Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>> |\n        ById<RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: ById<RxStorageWriteError<RxDocType>> = {};\n    const changedDocumentIds: RxDocType[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const docsByIdIsMap = typeof docsInDb.get === 'function';\n\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsByIdIsMap ? (docsInDb as any).get(id) : (docsInDb as any)[id];\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow,\n                        attachmentId\n                    };\n                    errors[id as any] = attachmentError;\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    operation: 'INSERT',\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document as any,\n                    previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous as any,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors[id as any] = err;\n                return;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                if (\n                                    (attachmentData as RxAttachmentWriteData).data &&\n                                    /**\n                                     * Performance shortcut,\n                                     * do not update the attachment data if it did not change.\n                                     */\n                                    previousAttachmentData.digest !== newDigest\n                                ) {\n                                    attachmentsUpdate.push({\n                                        documentId: id as any,\n                                        attachmentId,\n                                        attachmentData: attachmentData as RxAttachmentWriteData\n                                    });\n                                }\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors[id as any] = attachmentError;\n            } else {\n                bulkUpdateDocs.push(updatedRow);\n            }\n\n            const writeDoc = writeRow.document;\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n                previousEventDocumentData = writeRow.previous;\n            } else if (writeDoc._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(writeRow.document) as any;\n                previousEventDocumentData = writeRow.previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            changedDocumentIds.push(id);\n            eventBulk.events.push({\n                eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                documentId: id as any,\n                documentData: ensureNotFalsy(eventDocumentData),\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            });\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        digest: defaultHashFunction(data),\n        length: getAttachmentSize(data),\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        }) as any;\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}