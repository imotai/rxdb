{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","lastOfArray","ensureNotFalsy","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieCount","dexieQuery","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","addRxStorageMultiInstanceSupport","newRxError","instanceId","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","context","ensureNotClosed","state","ret","success","error","documentKeys","map","writeRow","document","categorized","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDbMap","Map","docsInDbWithInternals","forEach","docWithDexieInternals","doc","set","errors","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","bulkInsertDocs","row","docId","push","bulkUpdateDocs","_deleted","previous","args","Promise","all","length","bulkPut","d","bulkDelete","eventBulk","events","lastState","Object","values","checkpoint","id","lwt","_meta","endTime","event","next","findDocumentsById","ids","deleted","docsInDb","bulkGet","idx","documentInDb","query","preparedQuery","count","result","mode","getChangedDocumentsSince","limit","sinceLwt","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","slice","lastDoc","documents","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy\n} from '../utils';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieCount, dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\nimport { newRxError } from '../../rx-error';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\nRxDocType,\nDexieStorageInternals,\nDexieSettings,\nRxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals ? fromDexieToStorage(docWithDexieInternals) : docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set(doc[this.primaryPath], doc);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document as any;\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document as any;\n                    if (\n                        row.document._deleted &&\n                        (row.previous && !row.previous._deleted)\n                    ) {\n                        // newly deleted\n                        bulkRemoveDocs.push(docId);\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (\n                        row.document._deleted &&\n                        row.previous && row.previous._deleted\n                    ) {\n                        // deleted was modified but is still deleted\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (!row.document._deleted) {\n                        // non-deleted was changed\n                        bulkPutDocs.push(row.document);\n                    } else {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const endTime = now();\n            ensureNotFalsy(categorized).eventBulk.events.forEach(event => (event as any).endTime = endTime);\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids);\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n    async count(\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await dexieCount(this, preparedQuery);\n        return {\n            count: result,\n            mode: 'fast'\n        };\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: RxStorageDefaultCheckpoint;\n        }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}