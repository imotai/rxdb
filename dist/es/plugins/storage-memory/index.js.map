{"version":3,"file":"index.js","names":["ensureRxStorageInstanceParamsAreCorrect","flatClone","RxStorageDexieStatics","createMemoryStorageInstance","COLLECTION_STATES","Map","getRxStorageMemory","settings","storage","name","statics","collectionStates","createStorageInstance","params","collectionName","schema","version","useSettings","Object","assign","options"],"sources":["../../../../src/plugins/storage-memory/index.ts"],"sourcesContent":["import { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport type { RxStorageInstanceCreationParams } from '../../types';\nimport { flatClone } from '../../plugins/utils';\nimport { RxStorageDexieStatics } from '../storage-dexie/dexie-statics';\nimport type {\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\nimport {\n    createMemoryStorageInstance,\n    RxStorageInstanceMemory\n} from './rx-storage-instance-memory';\n\n/**\n * Keep the state even when the storage instance is closed.\n * This makes it easier to use the memory storage\n * to test filesystem-like and multiInstance behaviors.\n */\nconst COLLECTION_STATES = new Map();\n\nexport function getRxStorageMemory(\n    settings: RxStorageMemorySettings = {}\n): RxStorageMemory {\n\n    const storage: RxStorageMemory = {\n        name: 'memory',\n        statics: RxStorageDexieStatics,\n        collectionStates: COLLECTION_STATES,\n        createStorageInstance<RxDocType>(\n            params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>\n        ): Promise<RxStorageInstanceMemory<RxDocType>> {\n            ensureRxStorageInstanceParamsAreCorrect(params);\n\n            // TODO we should not need to append the schema version here.\n            params = flatClone(params);\n            params.collectionName = params.collectionName + '-' + params.schema.version;\n\n            const useSettings = Object.assign(\n                {},\n                settings,\n                params.options\n            );\n\n\n            return createMemoryStorageInstance(this, params, useSettings);\n        }\n    };\n\n    return storage;\n}\n\n\nexport * from './memory-helper';\nexport * from './binary-search-bounds';\nexport * from './memory-types';\nexport * from './memory-indexes';\nexport * from './rx-storage-instance-memory';\n"],"mappings":"AAAA,SAASA,uCAAuC,QAAQ,yBAAyB;AAEjF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,qBAAqB,QAAQ,gCAAgC;AAMtE,SACIC,2BAA2B,QAExB,8BAA8B;;AAErC;AACA;AACA;AACA;AACA;AACA,IAAMC,iBAAiB,GAAG,IAAIC,GAAG,EAAE;AAEnC,OAAO,SAASC,kBAAkB,GAEf;EAAA,IADfC,QAAiC,uEAAG,CAAC,CAAC;EAGtC,IAAMC,OAAwB,GAAG;IAC7BC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAER,qBAAqB;IAC9BS,gBAAgB,EAAEP,iBAAiB;IACnCQ,qBAAqB,iCACjBC,MAA0F,EAC/C;MAC3Cb,uCAAuC,CAACa,MAAM,CAAC;;MAE/C;MACAA,MAAM,GAAGZ,SAAS,CAACY,MAAM,CAAC;MAC1BA,MAAM,CAACC,cAAc,GAAGD,MAAM,CAACC,cAAc,GAAG,GAAG,GAAGD,MAAM,CAACE,MAAM,CAACC,OAAO;MAE3E,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAC7B,CAAC,CAAC,EACFZ,QAAQ,EACRM,MAAM,CAACO,OAAO,CACjB;MAGD,OAAOjB,2BAA2B,CAAC,IAAI,EAAEU,MAAM,EAAEI,WAAW,CAAC;IACjE;EACJ,CAAC;EAED,OAAOT,OAAO;AAClB;AAGA,cAAc,iBAAiB;AAC/B,cAAc,wBAAwB;AACtC,cAAc,gBAAgB;AAC9B,cAAc,kBAAkB;AAChC,cAAc,8BAA8B"}