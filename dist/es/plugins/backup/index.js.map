{"version":3,"file":"index.js","names":["path","BehaviorSubject","firstValueFrom","Subject","filter","map","newRxError","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","clearFolder","deleteFolder","documentFolder","ensureFolderExists","getMeta","prepareFolders","setMeta","writeJsonToFile","writeToFile","backupSingleDocument","rxDocument","options","data","toJSON","writtenFiles","docFolder","primary","fileLocation","join","push","attachments","attachmentsFolder","allAttachments","Promise","all","attachment","getData","content","attachmentFileLocation","id","BACKUP_STATES_BY_DB","WeakMap","addToBackupStates","db","state","has","set","ar","RxBackupState","database","isStopped","subs","persistRunning","initialReplicationDone$","internalWriteEvents$","writeEvents$","asObservable","batchSize","persistOnce","then","_persistOnce","meta","Object","entries","collections","collectionName","collection","primaryKey","schema","primaryPath","processedDocuments","Set","requestIdlePromise","collectionStates","lastCheckpoint","checkpoint","hasMore","storageInstance","getChangedDocumentsSince","changesResult","documents","length","docIds","doc","add","elem","pos","arr","indexOf","findByIds","exec","docs","size","Array","from","values","next","name","documentId","files","deleted","docId","getValue","watchForChanges","forEach","changes$","changeStream","sub","subscribe","awaitInitialBackup","pipe","v","cancel","unsubscribe","backup","backupState","live","RxDBBackupPlugin","rxdb","prototypes","RxDatabase","proto","hooks","preDestroyRxDatabase","after","states","get"],"sources":["../../../../src/plugins/backup/index.ts"],"sourcesContent":["import * as path from 'path';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport {\n    filter,\n    map\n} from 'rxjs/operators';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BackupOptions,\n    RxBackupWriteEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxPlugin\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils';\nimport {\n    clearFolder,\n    deleteFolder,\n    documentFolder,\n    ensureFolderExists,\n    getMeta,\n    prepareFolders,\n    setMeta,\n    writeJsonToFile,\n    writeToFile\n} from './file-util';\n\n\n/**\n * Backups a single documents,\n * returns the paths to all written files\n */\nexport async function backupSingleDocument(\n    rxDocument: RxDocument<any, any>,\n    options: BackupOptions\n): Promise<string[]> {\n    const data = rxDocument.toJSON(true);\n    const writtenFiles: string[] = [];\n\n    const docFolder = documentFolder(options, rxDocument.primary);\n    await clearFolder(docFolder);\n\n    const fileLocation = path.join(\n        docFolder,\n        'document.json'\n    );\n    await writeJsonToFile(fileLocation, data);\n    writtenFiles.push(fileLocation);\n\n    if (options.attachments) {\n        const attachmentsFolder = path.join(\n            docFolder,\n            'attachments'\n        );\n        ensureFolderExists(attachmentsFolder);\n        const attachments = (rxDocument as RxDocument).allAttachments();\n        await Promise.all(\n            attachments\n                .map(async (attachment) => {\n                    const content = await attachment.getData();\n                    const attachmentFileLocation = path.join(\n                        attachmentsFolder,\n                        attachment.id\n                    );\n                    await writeToFile(attachmentFileLocation, content);\n                    writtenFiles.push(attachmentFileLocation);\n                })\n        );\n    }\n\n    return writtenFiles;\n}\n\nconst BACKUP_STATES_BY_DB: WeakMap<RxDatabase, RxBackupState[]> = new WeakMap();\nfunction addToBackupStates(db: RxDatabase, state: RxBackupState) {\n    if (!BACKUP_STATES_BY_DB.has(db)) {\n        BACKUP_STATES_BY_DB.set(db, []);\n    }\n    const ar = getFromMapOrThrow(BACKUP_STATES_BY_DB, db);\n    if (!ar) {\n        throw newRxError('SNH');\n    }\n    ar.push(state);\n}\n\nexport class RxBackupState {\n    public isStopped: boolean = false;\n    private subs: Subscription[] = [];\n    private persistRunning: Promise<void> = PROMISE_RESOLVE_VOID;\n    private initialReplicationDone$: BehaviorSubject<boolean> = new BehaviorSubject(false as any);\n\n    private readonly internalWriteEvents$: Subject<RxBackupWriteEvent> = new Subject();\n    public readonly writeEvents$: Observable<RxBackupWriteEvent> = this.internalWriteEvents$.asObservable();\n\n    constructor(\n        public readonly database: RxDatabase,\n        public readonly options: BackupOptions\n    ) {\n        if (!this.options.batchSize) {\n            this.options.batchSize = 10;\n        }\n        addToBackupStates(database, this);\n        prepareFolders(database, options);\n    }\n\n    /**\n     * Persists all data from all collections,\n     * beginning from the oldest sequence checkpoint\n     * to the newest one.\n     * Do not call this while it is already running.\n     * Returns true if there are more documents to process\n     */\n    public persistOnce() {\n        return this.persistRunning = this.persistRunning.then(() => this._persistOnce());\n    }\n\n    public async _persistOnce() {\n        const meta = await getMeta(this.options);\n\n        await Promise.all(\n            Object\n                .entries(this.database.collections)\n                .map(async ([collectionName, collection]) => {\n                    const primaryKey = collection.schema.primaryPath;\n                    const processedDocuments: Set<string> = new Set();\n\n                    await this.database.requestIdlePromise();\n\n                    if (!meta.collectionStates[collectionName]) {\n                        meta.collectionStates[collectionName] = {};\n                    }\n                    let lastCheckpoint = meta.collectionStates[collectionName].checkpoint;\n\n                    let hasMore = true;\n                    while (hasMore && !this.isStopped) {\n                        await this.database.requestIdlePromise();\n                        const changesResult = await collection.storageInstance.getChangedDocumentsSince(\n                            this.options.batchSize ? this.options.batchSize : 0,\n                            lastCheckpoint\n                        );\n                        lastCheckpoint = changesResult.documents.length > 0 ? changesResult.checkpoint : lastCheckpoint;\n                        meta.collectionStates[collectionName].checkpoint = lastCheckpoint;\n\n                        const docIds: string[] = changesResult.documents\n                            .map(doc => doc[primaryKey])\n                            .filter(id => {\n                                if (\n                                    processedDocuments.has(id)\n                                ) {\n                                    return false;\n                                } else {\n                                    processedDocuments.add(id);\n                                    return true;\n                                }\n                            })\n                            .filter((elem, pos, arr) => arr.indexOf(elem) === pos); // unique\n                        await this.database.requestIdlePromise();\n\n                        const docs: Map<string, RxDocument> = await collection.findByIds(docIds).exec();\n                        if (docs.size === 0) {\n                            hasMore = false;\n                            continue;\n                        }\n                        await Promise.all(\n                            Array\n                                .from(docs.values())\n                                .map(async (doc) => {\n                                    const writtenFiles = await backupSingleDocument(doc, this.options);\n                                    this.internalWriteEvents$.next({\n                                        collectionName: collection.name,\n                                        documentId: doc.primary,\n                                        files: writtenFiles,\n                                        deleted: false\n                                    });\n                                })\n                        );\n                        // handle deleted documents\n                        await Promise.all(\n                            docIds\n                                .filter(docId => !docs.has(docId))\n                                .map(async (docId) => {\n                                    await deleteFolder(documentFolder(this.options, docId));\n                                    this.internalWriteEvents$.next({\n                                        collectionName: collection.name,\n                                        documentId: docId,\n                                        files: [],\n                                        deleted: true\n                                    });\n                                })\n                        );\n                    }\n                    meta.collectionStates[collectionName].checkpoint = lastCheckpoint;\n                    await setMeta(this.options, meta);\n                })\n        );\n\n        if (!this.initialReplicationDone$.getValue()) {\n            this.initialReplicationDone$.next(true);\n        }\n    }\n\n    public watchForChanges() {\n        const collections: RxCollection[] = Object.values(this.database.collections);\n        collections.forEach(collection => {\n            const changes$ = collection.storageInstance.changeStream();\n            const sub = changes$.subscribe(() => {\n                this.persistOnce();\n            });\n            this.subs.push(sub);\n        });\n    }\n\n    /**\n     * Returns a promise that resolves when the initial backup is done\n     * and the filesystem is in sync with the database state\n     */\n    public awaitInitialBackup(): Promise<boolean> {\n        return firstValueFrom(\n            this.initialReplicationDone$.pipe(\n                filter(v => !!v),\n                map(() => true)\n            )\n        );\n    }\n\n    cancel(): Promise<boolean> {\n        if (this.isStopped) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.isStopped = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        return PROMISE_RESOLVE_TRUE;\n    }\n}\n\n\nexport function backup(\n    this: RxDatabase,\n    options: BackupOptions\n): RxBackupState {\n    const backupState = new RxBackupState(this, options);\n    backupState.persistOnce();\n\n    if (options.live) {\n        backupState.watchForChanges();\n    }\n\n    return backupState;\n}\n\nexport * from './file-util';\nexport const RxDBBackupPlugin: RxPlugin = {\n    name: 'backup',\n    rxdb: true,\n    prototypes: {\n        RxDatabase(proto: any) {\n            proto.backup = backup;\n        }\n    },\n    hooks: {\n        preDestroyRxDatabase: {\n            after: function preDestroyRxDatabase(db: RxDatabase) {\n                const states = BACKUP_STATES_BY_DB.get(db);\n                if (states) {\n                    states.forEach(state => state.cancel());\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}