{"version":3,"file":"utils-blob-buffer.js","names":["arrayBufferToBase64","blobBufferUtil","createBlobBuffer","data","type","blobBuffer","Blob","createBlobBufferFromBase64","base64String","fetch","base64Response","blob","isBlobBuffer","Buffer","isBuffer","toString","blobBufferType","Object","prototype","call","Promise","resolve","text","toBase64String","URL","createObjectURL","then","res","arrayBuffer","size"],"sources":["../../../../src/plugins/utils/utils-blob-buffer.ts"],"sourcesContent":["import type {\n    BlobBuffer\n} from '../../types';\nimport { arrayBufferToBase64 } from './utils-base64';\n\n/**\n * This is an abstraction over the Blob/Buffer data structure.\n * We need this because it behaves different in different JavaScript runtimes.\n * Since RxDB 13.0.0 we switch to Blob-only because Node.js does not support\n * the Blob data structure which is also supported by the browsers.\n */\nexport const blobBufferUtil = {\n    /**\n     * depending if we are on node or browser,\n     * we have to use Buffer(node) or Blob(browser)\n     */\n    createBlobBuffer(\n        data: string,\n        type: string\n    ): BlobBuffer {\n        const blobBuffer = new Blob([data], {\n            type\n        });\n        return blobBuffer;\n    },\n    /**\n     * depending if we are on node or browser,\n     * we have to use Buffer(node) or Blob(browser)\n     */\n    async createBlobBufferFromBase64(\n        base64String: string,\n        type: string\n    ): Promise<BlobBuffer> {\n        const base64Response = await fetch(`data:${type};base64,${base64String}`);\n        const blob = await base64Response.blob();\n        return blob;\n\n    },\n    isBlobBuffer(data: any): boolean {\n        if (data instanceof Blob || (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    toString(blobBuffer: BlobBuffer | string): Promise<string> {\n        /**\n         * in the electron-renderer we have a typed array insteaf of a blob\n         * so we have to transform it.\n         * @link https://github.com/pubkey/rxdb/issues/1371\n         */\n        const blobBufferType = Object.prototype.toString.call(blobBuffer);\n        if (blobBufferType === '[object Uint8Array]') {\n            blobBuffer = new Blob([blobBuffer]);\n        }\n        if (typeof blobBuffer === 'string') {\n            return Promise.resolve(blobBuffer);\n        }\n\n        return (blobBuffer as Blob).text();\n    },\n    async toBase64String(blobBuffer: BlobBuffer | string): Promise<string> {\n        if (typeof blobBuffer === 'string') {\n            return blobBuffer;\n        }\n\n        /**\n         * in the electron-renderer we have a typed array insteaf of a blob\n         * so we have to transform it.\n         * @link https://github.com/pubkey/rxdb/issues/1371\n         */\n        const blobBufferType = Object.prototype.toString.call(blobBuffer);\n        if (blobBufferType === '[object Uint8Array]') {\n            blobBuffer = new Blob([blobBuffer]);\n        }\n\n        const arrayBuffer = await fetch(URL.createObjectURL(blobBuffer as Blob)).then(res => res.arrayBuffer());\n        return arrayBufferToBase64(arrayBuffer);\n    },\n    size(blobBuffer: BlobBuffer): number {\n        return (blobBuffer as Blob).size;\n    }\n};\n"],"mappings":";;AAGA,SAASA,mBAAmB,QAAQ,gBAAgB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAG;EAC1B;AACJ;AACA;AACA;EACIC,gBAAgB,4BACZC,IAAY,EACZC,IAAY,EACF;IACV,IAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE;MAChCC,IAAI,EAAJA;IACJ,CAAC,CAAC;IACF,OAAOC,UAAU;EACrB,CAAC;EACD;AACJ;AACA;AACA;EACUE,0BAA0B;IAAA,0GAC5BC,YAAoB,EACpBJ,IAAY;MAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAEiBK,KAAK,WAASL,IAAI,gBAAWI,YAAY,CAAG;UAAA;YAAnEE,cAAc;YAAA;YAAA,OACDA,cAAc,CAACC,IAAI,EAAE;UAAA;YAAlCA,IAAI;YAAA,iCACHA,IAAI;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAGfC,YAAY,wBAACT,IAAS,EAAW;IAC7B,IAAIA,IAAI,YAAYG,IAAI,IAAK,OAAOO,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,CAACX,IAAI,CAAE,EAAE;MAClF,OAAO,IAAI;IACf,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ,CAAC;EACDY,QAAQ,oBAACV,UAA+B,EAAmB;IACvD;AACR;AACA;AACA;AACA;IACQ,IAAMW,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACH,QAAQ,CAACI,IAAI,CAACd,UAAU,CAAC;IACjE,IAAIW,cAAc,KAAK,qBAAqB,EAAE;MAC1CX,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACD,UAAU,CAAC,CAAC;IACvC;IACA,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAChC,OAAOe,OAAO,CAACC,OAAO,CAAChB,UAAU,CAAC;IACtC;IAEA,OAAQA,UAAU,CAAUiB,IAAI,EAAE;EACtC,CAAC;EACKC,cAAc;IAAA,iGAAClB,UAA+B;MAAA;MAAA;QAAA;UAAA;YAAA,MAC5C,OAAOA,UAAU,KAAK,QAAQ;cAAA;cAAA;YAAA;YAAA,kCACvBA,UAAU;UAAA;YAGrB;AACR;AACA;AACA;AACA;YACcW,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACH,QAAQ,CAACI,IAAI,CAACd,UAAU,CAAC;YACjE,IAAIW,cAAc,KAAK,qBAAqB,EAAE;cAC1CX,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACD,UAAU,CAAC,CAAC;YACvC;YAAC;YAAA,OAEyBI,KAAK,CAACe,GAAG,CAACC,eAAe,CAACpB,UAAU,CAAS,CAAC,CAACqB,IAAI,CAAC,UAAAC,GAAG;cAAA,OAAIA,GAAG,CAACC,WAAW,EAAE;YAAA,EAAC;UAAA;YAAjGA,WAAW;YAAA,kCACV5B,mBAAmB,CAAC4B,WAAW,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAE3CC,IAAI,gBAACxB,UAAsB,EAAU;IACjC,OAAQA,UAAU,CAAUwB,IAAI;EACpC;AACJ,CAAC"}