{"version":3,"file":"websocket-server.js","names":["rxStorageInstanceToReplicationHandler","PROMISE_RESOLVE_VOID","Subject","startSocketServer","options","require","WebSocketServer","wss","port","path","closed","closeServer","onConnection$","complete","Promise","res","rej","clients","ws","close","err","on","next","server","asObservable","startWebsocketServer","serverState","database","onDestroy","push","replicationHandlerByCollection","Map","getReplicationHandler","collectionName","collections","Error","handler","get","collection","storageInstance","conflictHandler","token","set","subscribe","onCloseHandlers","onclose","map","fn","messageString","message","JSON","parse","method","changeStreamSub","masterChangeStream$","ev","streamResponse","id","result","send","stringify","unsubscribe","params","response"],"sources":["../../../../src/plugins/replication-websocket/websocket-server.ts"],"sourcesContent":["import type {\n    RxReplicationHandler\n} from '../../types';\n\nimport type {\n    WebSocket,\n    ServerOptions\n} from 'isomorphic-ws';\nimport type {\n    WebsocketMessageResponseType,\n    WebsocketMessageType,\n    WebsocketServerOptions,\n    WebsocketServerState\n} from './websocket-types';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport {\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils';\nimport { Subject } from 'rxjs';\n\n\nexport function startSocketServer(options: ServerOptions): WebsocketServerState {\n    const { WebSocketServer } = require('isomorphic-ws' + '');\n    const wss = new WebSocketServer({\n        port: options.port,\n        path: options.path\n    });\n    let closed = false;\n    function closeServer() {\n        if (closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        closed = true;\n        onConnection$.complete();\n        return new Promise<void>((res, rej) => {\n            /**\n             * We have to close all client connections,\n             * otherwise wss.close() will never call the callback.\n             * @link https://github.com/websockets/ws/issues/1288#issuecomment-360594458\n             */\n            for (const ws of wss.clients) {\n                ws.close();\n            }\n            wss.close((err: any) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            });\n        });\n    }\n\n    const onConnection$ = new Subject<WebSocket>();\n    wss.on('connection', (ws: any) => onConnection$.next(ws));\n\n    return {\n        server: wss,\n        close: closeServer,\n        onConnection$: onConnection$.asObservable()\n    };\n}\n\nexport function startWebsocketServer(options: WebsocketServerOptions): WebsocketServerState {\n    const serverState = startSocketServer(options);\n\n    const database = options.database;\n\n    // auto close when the database gets destroyed\n    database.onDestroy.push(() => serverState.close());\n\n    const replicationHandlerByCollection: Map<string, RxReplicationHandler<any, any>> = new Map();\n    function getReplicationHandler(collectionName: string): RxReplicationHandler<any, any> {\n        if (!database.collections[collectionName]) {\n            throw new Error('collection ' + collectionName + ' does not exist');\n        }\n        let handler = replicationHandlerByCollection.get(collectionName);\n        if (!handler) {\n            const collection = database.collections[collectionName];\n            handler = rxStorageInstanceToReplicationHandler(\n                collection.storageInstance,\n                collection.conflictHandler,\n                database.token\n            );\n            replicationHandlerByCollection.set(collectionName, handler);\n        }\n        return handler;\n    }\n\n    serverState.onConnection$.subscribe(ws => {\n        const onCloseHandlers: Function[] = [];\n        ws.onclose = () => {\n            onCloseHandlers.map(fn => fn());\n        };\n        ws.on('message', async (messageString: string) => {\n            const message: WebsocketMessageType = JSON.parse(messageString);\n            const handler = getReplicationHandler(message.collection);\n            const method = handler[message.method];\n\n            /**\n             * If it is not a function,\n             * it means that the client requested the masterChangeStream$\n             */\n            if (typeof method !== 'function') {\n                const changeStreamSub = handler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: WebsocketMessageResponseType = {\n                        id: 'stream',\n                        collection: message.collection,\n                        result: ev\n                    };\n                    ws.send(JSON.stringify(streamResponse));\n                });\n                onCloseHandlers.push(() => changeStreamSub.unsubscribe());\n                return;\n            }\n            const result = await (method as any)(...message.params);\n            const response: WebsocketMessageResponseType = {\n                id: message.id,\n                collection: message.collection,\n                result\n            };\n            ws.send(JSON.stringify(response));\n        });\n    });\n\n\n    return serverState;\n}\n"],"mappings":"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"}