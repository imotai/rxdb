{"version":3,"file":"websocket-client.js","names":["replicateRxCollection","ReconnectingWebSocket","IsomorphicWebSocket","errorToPlainJson","getFromMapOrThrow","randomCouchString","toArray","filter","map","Subject","firstValueFrom","BehaviorSubject","newRxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","WEBSOCKET_BY_CACHE_KEY","Map","getWebSocket","url","databaseToken","cacheKey","has","get","wsClient","WebSocket","connected$","openPromise","Promise","res","onopen","next","onclose","message$","onmessage","messageObj","message","JSON","parse","data","error$","onerror","err","emitError","errors","er","direction","socket","refCount","set","removeWebSocketRef","database","token","obj","complete","close","replicateWithWebsocketServer","options","getRequestId","count","requestCounter","collection","requestFlag","socketState","messages$","replicationState","replicationIdentifier","live","pull","batchSize","stream$","pipe","msg","id","name","result","handler","lastPulledCheckpoint","requestId","request","method","params","send","stringify","push","docs","subscribe","subjects","error","isConnected","reSync","streamRequest","onDestroy"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport {\n    errorToPlainJson,\n    getFromMapOrThrow,\n    randomCouchString,\n    toArray\n} from '../../plugins/utils';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom,\n    BehaviorSubject\n} from 'rxjs';\nimport {\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connected$: BehaviorSubject<boolean>;\n    message$: Subject<any>;\n    error$: Subject<RxError>;\n};\n\n\n/**\n * Copied and adapter from the 'reconnecting-websocket' npm module.\n * Some bundlers have problems with bundling the isomorphic-ws plugin\n * so we directly check the correctness in RxDB to ensure that we can\n * throw a helpful error.\n */\nfunction ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\n    if (!is) {\n        console.dir(w);\n        throw new Error('websocket not valid');\n    }\n}\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_CACHE_KEY: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string,\n    /**\n     * The value of RxDatabase.token.\n     */\n    databaseToken: string\n): Promise<WebsocketWithRefCount> {\n    /**\n     * Also use the database token as cache-key\n     * to make it easier to test and debug\n     * multi-instance setups.\n     */\n    const cacheKey = url + '|||' + databaseToken;\n\n    let has = WEBSOCKET_BY_CACHE_KEY.get(cacheKey);\n    if (!has) {\n        ensureIsWebsocket(IsomorphicWebSocket);\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            [],\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n        const connected$ = new BehaviorSubject<boolean>(false);\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connected$.next(true);\n                res();\n            };\n        });\n        wsClient.onclose = () => {\n            connected$.next(false);\n        };\n\n        const message$ = new Subject<any>();\n        wsClient.onmessage = (messageObj) => {\n            const message = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: toArray(err).map((er: any) => errorToPlainJson(er)),\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        };\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connected$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_CACHE_KEY.set(cacheKey, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string,\n    database: RxDatabase\n) {\n    const cacheKey = url + '|||' + database.token;\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_CACHE_KEY, cacheKey);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_CACHE_KEY.delete(cacheKey);\n        obj.connected$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url, options.collection.database.token);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        live: options.live,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                };\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                };\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    socketState.connected$.subscribe(isConnected => {\n        if (isConnected) {\n            /**\n             * When the client goes offline and online again,\n             * we have to send a 'RESYNC' signal because the client\n             * might have missed out events while being offline.\n             */\n            replicationState.reSync();\n\n            /**\n             * Because reconnecting creates a new websocket-instance,\n             * we have to start the changestream from the remote again\n             * each time.\n             */\n            const streamRequest: WebsocketMessageType = {\n                id: 'stream',\n                collection: options.collection.name,\n                method: 'masterChangeStream$',\n                params: []\n            };\n            wsClient.send(JSON.stringify(streamRequest));\n        }\n    });\n\n    options.collection.onDestroy.push(() => removeWebSocketRef(options.url, options.collection.database));\n    return replicationState;\n}\n"],"mappings":"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"}