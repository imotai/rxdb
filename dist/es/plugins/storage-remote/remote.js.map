{"version":3,"file":"remote.js","names":["filter","ensureNotFalsy","createAnswer","createErrorAnswer","deepEqual","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","msg","method","subscribe","connectionId","Array","isArray","params","fullName","databaseName","collectionName","schema","version","join","state","get","storage","createStorageInstance","newRxStorageInstance","storageInstance","connectionIds","Set","set","send","Error","add","subs","push","changeStream","changes","message","answerTo","conflictResultionTasks","conflicts","subMsg","plainMessage","size","forEach","sub","unsubscribe","result"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    ensureNotFalsy\n} from '../../plugins/utils';\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteExposeSettings,\n    RxStorageRemoteExposeType\n} from './storage-remote-types';\nimport deepEqual from 'fast-deep-equal';\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\n    type InstanceState = {\n        storageInstance: RxStorageInstance<any, any, any>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'create')\n    ).subscribe(async (msg) => {\n        const connectionId = msg.connectionId;\n        /**\n         * Do an isArray check here\n         * for runtime check types to ensure we have\n         * instance creation params and not method input params.\n         */\n        if (Array.isArray(msg.params)) {\n            return;\n        }\n        const params = msg.params;\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                const newRxStorageInstance = await settings.storage.createStorageInstance(params);\n                state = {\n                    storageInstance: newRxStorageInstance,\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err: any) {\n                settings.send(createErrorAnswer(msg, err));\n                return;\n            }\n        } else {\n            // if instance already existed, ensure that the schema is equal\n            if (!deepEqual(params.schema, state.params.schema)) {\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\n            }\n        }\n        state.connectionIds.add(msg.connectionId);\n        const subs: Subscription[] = [];\n        /**\n         * Automatically subscribe to the streams$\n         * because we always need them.\n         */\n        subs.push(\n            state.storageInstance.changeStream().subscribe(changes => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n\n                settings.send(message);\n            })\n        );\n        subs.push(\n            state.storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: MessageToRemote = plainMessage as any;\n                if (message.method === 'create') {\n                    return;\n                }\n                if (!Array.isArray(message.params)) {\n                    return;\n                }\n                let result;\n                try {\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        settings.send(createAnswer(message, null));\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n                    result = await (ensureNotFalsy(state).storageInstance as any)[message.method](\n                        message.params[0],\n                        message.params[1],\n                        message.params[2],\n                        message.params[3]\n                    );\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        subs.forEach(sub => sub.unsubscribe());\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        instanceByFullName.delete(fullName);\n                        /**\n                         * TODO how to notify the other ports on remove() ?\n                         */\n                    }\n                    settings.send(createAnswer(message, result));\n                } catch (err: any) {\n                    settings.send(createErrorAnswer(message, err));\n                }\n            })\n        );\n\n        settings.send(createAnswer(msg, 'ok'));\n    });\n\n    return {\n        instanceByFullName\n    };\n}\n"],"mappings":"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"}