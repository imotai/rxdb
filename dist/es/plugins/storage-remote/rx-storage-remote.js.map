{"version":3,"file":"rx-storage-remote.js","names":["ensureNotFalsy","firstValueFrom","filter","Subject","randomCouchString","RxStorageRemote","settings","name","requestIdSeed","lastRequestId","statics","getRequestId","newId","createStorageInstance","params","requestId","waitForOkPromise","messages$","pipe","msg","answerTo","send","connectionId","method","waitForOkResult","error","Error","JSON","stringify","RxStorageInstanceRemote","databaseName","collectionName","schema","options","storage","internals","changes$","conflicts$","subs","closed","push","subscribe","next","requestRemote","methodName","responsePromise","message","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","Promise","reject","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageRemote"],"sources":["../../../../src/plugins/storage-remote/rx-storage-remote.ts"],"sourcesContent":["import { ensureNotFalsy } from 'event-reduce-js';\nimport {\n    firstValueFrom,\n    filter,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from '../../types';\nimport {\n    randomCouchString\n} from '../../plugins/utils';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteInternals,\n    RxStorageRemoteSettings\n} from './storage-remote-types';\n\n\n\n\nexport class RxStorageRemote implements RxStorage<RxStorageRemoteInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string = 'remote';\n    private requestIdSeed: string = randomCouchString(10);\n    private lastRequestId: number = 0;\n    constructor(\n        public readonly settings: RxStorageRemoteSettings\n    ) {\n        this.statics = settings.statics;\n    }\n\n    public getRequestId() {\n        const newId = this.lastRequestId++;\n        return this.requestIdSeed + '|' + newId;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceRemote<RxDocType>> {\n\n        const requestId = this.getRequestId();\n        const waitForOkPromise = firstValueFrom(this.settings.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        this.settings.send({\n            connectionId: this.getRequestId(),\n            method: 'create',\n            requestId,\n            params\n        });\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + JSON.stringify(waitForOkResult.error));\n        }\n        return new RxStorageInstanceRemote(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                connectionId: ensureNotFalsy(waitForOkResult.connectionId)\n            },\n            params.options\n        );\n    }\n}\n\nexport class RxStorageInstanceRemote<RxDocType> implements RxStorageInstance<RxDocType, RxStorageRemoteInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    messages$: Observable<MessageFromRemote>;\n\n    constructor(\n        public readonly storage: RxStorageRemote,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageRemoteInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.messages$ = this.storage.settings.messages$.pipe(\n            filter(msg => msg.connectionId === this.internals.connectionId)\n        );\n        this.subs.push(\n            this.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestId = this.storage.getRequestId();\n        const responsePromise = firstValueFrom(\n            this.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: MessageToRemote = {\n            connectionId: this.internals.connectionId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.storage.settings.send(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error('could not requestRemote: ' + JSON.stringify(response.error));\n        } else {\n            return response.return;\n        }\n    }\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n    }\n    async remove(): Promise<void> {\n        this.closed = true;\n        await this.requestRemote('remove', []);\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageRemote(settings: RxStorageRemoteSettings): RxStorageRemote {\n    return new RxStorageRemote(settings);\n}\n"],"mappings":"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"}