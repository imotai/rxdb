{"version":3,"file":"index.js","names":["objectPath","ensureNotFalsy","fastUnsecureHash","graphQLRequest","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","setCredentials","credentials","queryParams","http","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","graphqlReplicationState","result","errors","dataPath","Object","keys","data","get","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","on","next","query","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","RxDBReplicationGraphQLPlugin","name","init","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with a remote graphql endpoint.\n */\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../plugins/utils';\n\nimport {\n    graphQLRequest,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\n\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string; }): void {\n        this.clientState.headers = headers;\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials;\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection<RxDocType>,\n    {\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = objectPath.get(result, dataPath);\n\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    };\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    };\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}