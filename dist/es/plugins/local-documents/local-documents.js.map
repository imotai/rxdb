{"version":3,"file":"local-documents.js","names":["getDefaultRevision","getDefaultRxDocumentMeta","filter","map","startWith","mergeMap","getLocalDocStateByParent","getSingleDocument","writeSingle","insertLocal","id","data","state","docData","_deleted","_meta","_rev","_attachments","storageInstance","document","then","newDocData","docCache","getCachedRxDocument","upsertLocal","getLocal","existing","docPromise","incrementalModify","found","getLatestDocumentDataIfExists","Promise","resolve","getLocal$","$","pipe","cE","changeEvent","doc","changeEventOrDoc","isLocal","documentId","use","filterFlagged"],"sources":["../../../../src/plugins/local-documents/local-documents.ts"],"sourcesContent":["import {\n    getDefaultRevision,\n    getDefaultRxDocumentMeta\n} from '../../plugins/utils';\n\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\n\nimport {\n    filter,\n    map,\n    startWith,\n    mergeMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { getLocalDocStateByParent } from './local-documents-helper';\nimport { getSingleDocument, writeSingle } from '../../rx-storage-helper';\n\n\n\n/**\n * save the local-document-data\n * throws if already exists\n */\nexport async function insertLocal<DocData extends Record<string, any> = any>(\n    this: RxDatabase | RxCollection,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    const state = await getLocalDocStateByParent(this);\n\n    // create new one\n    const docData: RxDocumentWriteData<RxLocalDocumentData<DocData>> = {\n        id: id,\n        data,\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    return writeSingle(\n        state.storageInstance,\n        {\n            document: docData\n        },\n        'local-document-insert'\n    ).then(newDocData => state.docCache.getCachedRxDocument(newDocData) as any);\n}\n\n/**\n * save the local-document-data\n * overwrites existing if exists\n */\nexport function upsertLocal<DocData extends Record<string, any> = any>(\n    this: any,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    return this.getLocal(id)\n        .then((existing: RxDocument) => {\n            if (!existing) {\n                // create new one\n                const docPromise = this.insertLocal(id, data);\n                return docPromise;\n            } else {\n                // update existing\n                return existing.incrementalModify(() => {\n                    return data;\n                });\n            }\n        });\n}\n\nexport async function getLocal<DocData = any>(this: any, id: string): Promise<RxLocalDocument<DocData> | null> {\n    const state = await getLocalDocStateByParent(this);\n    const docCache = state.docCache;\n\n    // check in doc-cache\n    const found = docCache.getLatestDocumentDataIfExists(id);\n    if (found) {\n        return Promise.resolve(\n            docCache.getCachedRxDocument(found) as any\n        );\n    }\n\n    // if not found, check in storage instance\n    return getSingleDocument(state.storageInstance, id)\n        .then((docData) => {\n            if (!docData) {\n                return null;\n            }\n            return state.docCache.getCachedRxDocument(docData) as any;\n        });\n}\n\nexport function getLocal$<DocData = any>(this: RxCollection, id: string): Observable<RxLocalDocument<DocData> | null> {\n    return this.$.pipe(\n        startWith(null),\n        mergeMap(async (cE: RxChangeEvent<RxLocalDocumentData> | null) => {\n            if (cE) {\n                return {\n                    changeEvent: cE\n                };\n            } else {\n                const doc = await this.getLocal(id);\n                return {\n                    doc: doc\n                };\n            }\n        }),\n        mergeMap(async (changeEventOrDoc) => {\n            if (changeEventOrDoc.changeEvent) {\n                const cE = changeEventOrDoc.changeEvent;\n                if (!cE.isLocal || cE.documentId !== id) {\n                    return {\n                        use: false\n                    };\n                } else {\n                    const doc = await this.getLocal(id);\n                    return {\n                        use: true,\n                        doc: doc\n                    };\n                }\n            } else {\n                return {\n                    use: true,\n                    doc: changeEventOrDoc.doc\n                };\n            }\n        }),\n        filter(filterFlagged => filterFlagged.use),\n        map(filterFlagged => {\n            return filterFlagged.doc as any;\n        })\n    );\n}\n"],"mappings":"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"}