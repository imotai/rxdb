{"version":3,"file":"index.js","names":["BehaviorSubject","filter","firstValueFrom","map","Subject","addRxPlugin","rxStorageInstanceToReplicationHandler","ensureNotFalsy","getFromMapOrThrow","randomCouchString","RxDBLeaderElectionPlugin","replicateRxCollection","isMasterInP2PReplication","sendMessageAndAwaitAnswer","syncP2P","options","getRequestId","count","requestCounter","collection","database","token","requestFlag","pull","batchSize","push","multiInstance","waitForLeadership","storageToken","pool","RxP2PReplicationPool","connectionHandlerCreator","subs","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","data","message","method","send","id","result","connectSub","connect$","canceled","params","tokenResponse","peerToken","isMaster","hashFunction","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicationState","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","Object","assign","handler","lastPulledCheckpoint","answer","stream$","response$","m","undefined","docs","addPeer","peerStates$","Map","onDestroy","cancel","storageInstance","conflictHandler","peerState","getValue","set","forEach","sub","awaitFirstPeer","peerStates","size","Array","from","keys","destroy","RxDBReplicationP2PPlugin","init","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-p2p/index.ts"],"sourcesContent":["import { BehaviorSubject, filter, firstValueFrom, map, Subject, Subscription } from 'rxjs';\nimport { addRxPlugin } from '../../plugin';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport type {\n    RxCollection,\n    RxError,\n    RxPlugin,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types';\nimport { ensureNotFalsy, getFromMapOrThrow, randomCouchString } from '../../plugins/utils';\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport { replicateRxCollection } from '../replication';\nimport { isMasterInP2PReplication, sendMessageAndAwaitAnswer } from './p2p-helper';\nimport type {\n    P2PConnectionHandler,\n    P2PPeer,\n    P2PPeerState,\n    P2PReplicationCheckpoint,\n    P2PResponse,\n    RxP2PReplicationState,\n    SyncOptionsP2P\n} from './p2p-types';\n\n\nexport async function syncP2P<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: SyncOptionsP2P<RxDocType>\n): Promise<RxP2PReplicationPool<RxDocType>> {\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    const collection = this;\n    if (this.database.multiInstance) {\n        await this.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await this.database.storageToken;\n    const pool = new RxP2PReplicationPool(\n        this,\n        options,\n        options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            /**\n             * TODO ensure both know the correct secret\n             */\n            const tokenResponse = await sendMessageAndAwaitAnswer(\n                pool.connectionHandler,\n                peer,\n                {\n                    id: getRequestId(),\n                    method: 'token',\n                    params: []\n                }\n            );\n            const peerToken: string = tokenResponse.result;\n            const isMaster = isMasterInP2PReplication(this.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxP2PReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: P2PResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: P2PResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [this.name, options.topic, peerToken].join('||'),\n                    collection: this,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: P2PReplicationCheckpoint) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the P2P replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxP2PReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<P2PPeer, P2PPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, P2PReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsP2P<RxDocType>,\n        public readonly connectionHandler: P2PConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.token,\n        );\n    }\n\n    addPeer(\n        peer: P2PPeer,\n        replicationState?: RxP2PReplicationState<RxDocType>\n    ) {\n        const peerState: P2PPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: P2PPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\n\nexport const RxDBReplicationP2PPlugin: RxPlugin = {\n    name: 'replication-p2p',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncP2P = syncP2P;\n        }\n    }\n};\n\n\nexport * from './p2p-helper';\nexport * from './p2p-types';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer';\n"],"mappings":"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"}