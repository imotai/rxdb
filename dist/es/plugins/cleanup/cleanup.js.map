{"version":3,"file":"cleanup.js","names":["PROMISE_RESOLVE_TRUE","REPLICATION_STATE_BY_COLLECTION","DEFAULT_CLEANUP_POLICY","RXSOTRAGE_CLEANUP_QUEUE","startCleanupForRxCollection","rxCollection","rxDatabase","database","cleanupPolicy","Object","assign","promiseWait","minimumCollectionAge","destroyed","waitForLeadership","cleanupRxCollection","runCleanupAfterDelete","storageInstance","isDone","awaitReplicationsInSync","replicationStates","get","Promise","all","map","replicationState","isStopped","awaitInSync","requestIdlePromise","then","cleanup","minimumDeletedTime","runEach"],"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types';\nimport { PROMISE_RESOLVE_TRUE } from '../../plugins/utils';\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication';\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper';\n\n/**\n * Even on multiple databases,\n * the calls to RxStorage().cleanup()\n * must never run in parallel.\n * The cleanup is a background task which should\n * not affect the performance of other, more important tasks.\n */\nlet RXSOTRAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\n\nexport async function startCleanupForRxCollection(\n    rxCollection: RxCollection\n) {\n    const rxDatabase = rxCollection.database;\n    const cleanupPolicy = Object.assign(\n        {},\n        DEFAULT_CLEANUP_POLICY,\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\n    );\n\n    /**\n     * Wait until minimumDatabaseInstanceAge is reached\n     * or collection is destroyed.\n     */\n    await rxCollection.promiseWait(cleanupPolicy.minimumCollectionAge);\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    if (cleanupPolicy.waitForLeadership) {\n        await rxDatabase.waitForLeadership();\n    }\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    // initially cleanup the collection\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\n\n    /**\n     * Afterwards we listen to deletes\n     * and only re-run the cleanup after\n     * minimumDeletedTime is reached.\n     */\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\n}\n\n/**\n * Runs the cleanup for a single RxCollection\n */\nexport async function cleanupRxCollection(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    const rxDatabase = rxCollection.database;\n    const storageInstance = rxCollection.storageInstance;\n\n    // run cleanup() until it returns true\n    let isDone = false;\n    while (!isDone && !rxCollection.destroyed) {\n        if (cleanupPolicy.awaitReplicationsInSync) {\n            const replicationStates = REPLICATION_STATE_BY_COLLECTION.get(rxCollection);\n            if (replicationStates) {\n                await Promise.all(\n                    replicationStates.map(replicationState => {\n                        if (!replicationState.isStopped()) {\n                            return replicationState.awaitInSync();\n                        }\n                    })\n                );\n            }\n        }\n\n        await rxDatabase.requestIdlePromise();\n        if (rxCollection.destroyed) {\n            return;\n        }\n        RXSOTRAGE_CLEANUP_QUEUE = RXSOTRAGE_CLEANUP_QUEUE\n            .then(() => {\n                if (rxCollection.destroyed) {\n                    return true;\n                }\n                return storageInstance.cleanup(cleanupPolicy.minimumDeletedTime);\n            });\n        isDone = await RXSOTRAGE_CLEANUP_QUEUE;\n    }\n}\n\nexport async function runCleanupAfterDelete(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    while (!rxCollection.destroyed) {\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\n        if (rxCollection.destroyed) {\n            return;\n        }\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\n    }\n}\n"],"mappings":"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"}