{"version":3,"file":"rx-storage-instance-loki.js","names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","getSortDocumentsByLastWriteTimeComparator","RX_META_LWT_MINIMUM","lastOfArray","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","RX_STORAGE_NAME_LOKIJS","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","addRxStorageMultiInstanceSupport","removeBroadcastChannelReference","instanceId","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","closed","primaryPath","primaryKey","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","remove","resolveConflictResultionTask","awaitLeadership","then","broadcastChannel","addEventListener","msg","documentWrites","context","length","args","localState","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","categorized","errors","bulkInsertDocs","docId","insert","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","values","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","chain","find","selector","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","result","mode","_documentId","_attachmentId","Error","sinceLwt","$gte","changedDocs","first","shift","slice","lastDoc","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","Promise","reject","complete","dbState","run","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","push","lokiCollectionName","version","collectionOptions","unique","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","instance","undefined","closeBefore","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../utils';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}