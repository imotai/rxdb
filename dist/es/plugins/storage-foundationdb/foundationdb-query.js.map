{"version":3,"file":"foundationdb-query.js","names":["getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","RxStorageDexieStatics","getFoundationDBIndexName","queryFoundationDB","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","internals","dbsPromise","dbs","indexForName","slice","unshift","indexName","indexDB","indexes","db","lowerBound","startKeys","concat","lowerBoundString","inclusiveStart","upperBound","endKeys","upperBoundString","inclusiveEnd","root","doTransaction","tx","innerResult","indexTx","at","subspace","mainTx","main","range","getRangeBatch","done","next","docIds","value","map","row","Promise","all","docId","get","docsData","forEach","docData","push","length","result","sortComparator","getSortComparator","sort","documents"],"sources":["../../../../src/plugins/storage-foundationdb/foundationdb-query.ts"],"sourcesContent":["import { QueryMatcher } from 'event-reduce-js';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport type {\n    RxDocumentData,\n    RxStorageQueryResult\n} from '../../types';\nimport { ensureNotFalsy } from '../../plugins/utils';\nimport { RxStorageDexieStatics } from '../storage-dexie';\nimport { getFoundationDBIndexName } from './foundationdb-helpers';\nimport type {\n    FoundationDBPreparedQuery\n} from './foundationdb-types';\nimport { RxStorageInstanceFoundationDB } from './rx-storage-instance-foundationdb';\n\nexport async function queryFoundationDB<RxDocType>(\n    instance: RxStorageInstanceFoundationDB<RxDocType>,\n    preparedQuery: FoundationDBPreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const queryPlan = preparedQuery.queryPlan;\n    const query = preparedQuery.query;\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlanFields: string[] = queryPlan.index;\n    const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            instance.schema,\n            preparedQuery\n        );\n    }\n\n    const dbs = await instance.internals.dbsPromise;\n\n\n    const indexForName = queryPlanFields.slice(0);\n    indexForName.unshift('_deleted');\n    const indexName = getFoundationDBIndexName(indexForName);\n    const indexDB = ensureNotFalsy(dbs.indexes[indexName]).db;\n\n    let lowerBound: any[] = queryPlan.startKeys;\n    lowerBound = [false].concat(lowerBound);\n    const lowerBoundString = getStartIndexStringFromLowerBound(\n        instance.schema,\n        indexForName,\n        lowerBound,\n        queryPlan.inclusiveStart\n    );\n\n    let upperBound: any[] = queryPlan.endKeys;\n    upperBound = [false].concat(upperBound);\n    const upperBoundString = getStartIndexStringFromUpperBound(\n        instance.schema,\n        indexForName,\n        upperBound,\n        queryPlan.inclusiveEnd\n    );\n    let result = await dbs.root.doTransaction(async (tx: any) => {\n        const innerResult: RxDocumentData<RxDocType>[] = [];\n        const indexTx = tx.at(indexDB.subspace);\n        const mainTx = tx.at(dbs.main.subspace);\n\n        const range = indexTx.getRangeBatch(\n            lowerBoundString,\n            upperBoundString,\n            {\n                // TODO these options seem to be broken in the foundationdb node bindings\n                // limit: instance.settings.batchSize,\n                // streamingMode: StreamingMode.Exact\n            }\n        );\n        let done = false;\n        while (!done) {\n            const next = await range.next();\n            if (next.done) {\n                done = true;\n                break;\n            }\n            const docIds = next.value.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n            docsData.forEach((docData) => {\n                if (!done) {\n                    if (!queryMatcher || queryMatcher(docData)) {\n                        innerResult.push(docData);\n                    }\n                }\n                if (\n                    !mustManuallyResort &&\n                    innerResult.length === skipPlusLimit\n                ) {\n                    done = true;\n                    range.return();\n                }\n            });\n        }\n        return innerResult;\n    });\n    if (mustManuallyResort) {\n        const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n        result = result.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    result = result.slice(skip, skipPlusLimit);\n\n    return {\n        documents: result\n    };\n}\n"],"mappings":"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"}