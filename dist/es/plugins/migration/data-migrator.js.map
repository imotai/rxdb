{"version":3,"file":"data-migrator.js","names":["Subject","deepEqual","clone","toPromise","flatClone","getHeightOfRevision","createRevision","PROMISE_RESOLVE_VOID","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","getDefaultRxDocumentMeta","now","createRxSchema","newRxError","runAsyncPluginHooks","runPluginHooks","getPreviousVersions","getMigrationStateByDatabase","map","getWrappedStorageInstance","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","normalizeMangoQuery","DataMigrator","newestCollection","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","schema","database","name","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","allSubject","allList","getValue","slice","push","asObservable","next","_getOldCollections","then","ret","getAllDocuments","storageInstance","storage","getAllQueryPrepared","statics","prepareQuery","query","queryResult","allDocs","documents","countAll","Promise","all","oldCol","jsonSchema","length","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","migrationState$","migrateOldCollection","res","sub","subscribe","subState","type","Math","round","error","e","unsubscribe","forEach","c","close","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","rej","state$","err","createOldCollection","version","schemaObj","dataMigrator","storageInstanceCreationParams","databaseInstanceToken","token","databaseName","collectionName","options","instanceCreationOptions","multiInstance","createStorageInstance","getOldCollectionDocs","collectionDocKeys","internalStore","findDocumentsById","key","docsObj","Object","values","oldColDocs","colDoc","data","filter","runStrategyIfNotNull","oldCollection","docOrNull","retPromise","getBatchOfOldCollection","preparedQuery","selector","sort","primaryPath","limit","skip","result","doc","migrateDocumentData","docData","attachmentsBefore","_attachments","mutateableDocData","nextVersion","resolve","_meta","isDocumentDataWithoutRevisionEqual","doc1","doc2","doc1NoRev","assign","undefined","_rev","doc2NoRev","_migrateDocuments","documentsData","migratedDocuments","bulkWriteToStorageInput","actions","idx","migratedDocData","action","migrated","newHeight","newRevision","saveData","lwt","originalStorageInstance","bulkWrite","document","bulkDeleteInputData","writeDeleted","_deleted","previous","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"sources":["../../../../src/plugins/migration/data-migrator.ts"],"sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta,\n    now\n} from '../../plugins/utils';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    InternalStoreCollectionDocType,\n    RxStorageInstance\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION\n} from '../../rx-database-internal-store';\nimport { normalizeMangoQuery } from '../../rx-query-helper';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which succeeded\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n\n                    const getAllDocuments = async (\n                        storageInstance: RxStorageInstance<any, any, any>,\n                        schema: RxJsonSchema<any>\n                    ): Promise<RxDocumentData<any>[]> => {\n                        const storage = this.database.storage;\n                        const getAllQueryPrepared = storage.statics.prepareQuery(\n                            storageInstance.schema,\n                            normalizeMangoQuery(\n                                schema,\n                                {}\n                            )\n                        );\n                        const queryResult = await storageInstance.query(getAllQueryPrepared);\n                        const allDocs = queryResult.documents;\n                        return allDocs;\n                    };\n\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.storageInstance,\n                                oldCol.schema.jsonSchema\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe({\n                                    next: (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    error: (e: any) => {\n                                        sub.unsubscribe();\n                                        // TODO we should not have to catch here.\n                                        this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                        stateSubject.error(e);\n                                    },\n                                    complete: () => {\n                                        if (currentCol) {\n                                            // TODO we should not have to catch here.\n                                            currentCol.storageInstance.close().catch(() => { });\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    }\n                                });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize,\n            skip: 0\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document through migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0\n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string; doc: any; }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: RxDocumentData<any>[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(\n                oldCollection.newestCollection.database.token\n            );\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            saveData._meta.lwt = now();\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        /**\n         * To ensure that we really keep that revision, we\n         * hackly insert this document via the RxStorageInstance.originalStorageInstance\n         * so that getWrappedStorageInstance() does not overwrite its own revision.\n         */\n        const originalStorageInstance: RxStorageInstance<any, any, any> = (oldCollection.newestCollection.storageInstance as any).originalStorageInstance;\n        await originalStorageInstance.bulkWrite(\n            bulkWriteToStorageInput.map(document => ({ document })),\n            'data-migrator-import'\n        );\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        writeDeleted._attachments = {};\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(\n            bulkDeleteInputData,\n            'data-migrator-delete'\n        );\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"mappings":"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"}