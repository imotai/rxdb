{"version":3,"file":"rx-database.js","names":["USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","idleQueue","IdleQueue","_subs","startupErrors","onDestroy","destroyed","collections","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","events","storageToken","PROMISE_RESOLVE_FALSE","storageTokenDocument","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","INTERNAL_STORE_SCHEMA","ensureStorageTokenDocumentExists","err","push","then","doc","data","$emit","has","id","add","next","removeCollectionDoc","schema","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","newRxError","writeDoc","flatCloneDocWithMeta","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","collectionName","rxJsonSchema","createRxSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","useArgs","assign","database","hookData","flatClone","runPluginHooks","conflictHandler","putDocsResult","ensureNoStartupErrors","error","_id","status","writeError","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","Promise","all","keys","map","createRxCollection","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","runAsyncPluginHooks","complete","sub","unsubscribe","col","close","remove","removeRxDatabase","throwIfDatabaseNameUsed","link","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","INTERNAL_STORAGE_NAME","createRxDatabase","ignoreDuplicate","localDocuments","defaultHashFunction","randomCouchString","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","getAllCollectionDocuments","statics","collectionDocs","collectionNames","removedCollectionNames","Array","from","removeCollectionStorages","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\nimport { removeCollectionStorages } from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n> {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\n        public readonly allowSlowCount?: boolean\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         *\n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             *\n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     *\n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs: any = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n            useArgs.conflictHandler = hookData.conflictHandler;\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            if (error.status !== 409) {\n                throw newRxError('DB12', {\n                    database: this.name,\n                    writeError: error\n                });\n            }\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection; },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        allowSlowCount = false,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy,\n                allowSlowCount\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n *\n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n *\n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}