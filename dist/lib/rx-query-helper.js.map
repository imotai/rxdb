{"version":3,"file":"rx-query-helper.js","names":["normalizeMangoQuery","schema","mangoQuery","primaryKey","getPrimaryFieldOfPrimaryKey","normalizedMangoQuery","clone","skip","selector","Object","entries","forEach","field","matcher","$eq","index","indexAr","toArray","includes","push","sort","map","indexes","fieldsWithLogicalOperator","Set","hasLogical","keys","find","operator","LOGICAL_OPERATORS","has","add","currentFieldsAmount","currentBestIndexForSort","useIndex","isMaybeReadonlyArray","firstWrongIndex","findIndex","indexField","isPrimaryInSort","p","firstPropertyNameOfObject","slice"],"sources":["../../src/rx-query-helper.ts"],"sourcesContent":["import { LOGICAL_OPERATORS } from './query-planner';\nimport { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    FilledMangoQuery,\n    MangoQuery,\n    RxDocumentData,\n    RxJsonSchema\n} from './types';\nimport {\n    clone,\n    firstPropertyNameOfObject,\n    toArray,\n    isMaybeReadonlyArray\n} from './plugins/utils';\n\n/**\n * Normalize the query to ensure we have all fields set\n * and queries that represent the same query logic are detected as equal by the caching.\n */\nexport function normalizeMangoQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mangoQuery: MangoQuery<RxDocType>\n): FilledMangoQuery<RxDocType> {\n    const primaryKey: string = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const normalizedMangoQuery: FilledMangoQuery<RxDocType> = clone(mangoQuery) as any;\n\n    if (typeof normalizedMangoQuery.skip !== 'number') {\n        normalizedMangoQuery.skip = 0;\n    }\n\n    if (!normalizedMangoQuery.selector) {\n        normalizedMangoQuery.selector = {};\n    } else {\n        normalizedMangoQuery.selector = normalizedMangoQuery.selector;\n        /**\n         * In mango query, it is possible to have an\n         * equals comparison by directly assigning a value\n         * to a property, without the '$eq' operator.\n         * Like:\n         * selector: {\n         *   foo: 'bar'\n         * }\n         * For normalization, we have to normalize this\n         * so our checks can perform properly.\n         *\n         *\n         * TODO this must work recursive with nested queries that\n         * contain multiple selectors via $and or $or etc.\n         */\n        Object\n            .entries(normalizedMangoQuery.selector)\n            .forEach(([field, matcher]) => {\n                if (typeof matcher !== 'object' || matcher === null) {\n                    (normalizedMangoQuery as any).selector[field] = {\n                        $eq: matcher\n                    };\n                }\n            });\n    }\n\n    /**\n     * Ensure that if an index is specified,\n     * the primaryKey is inside of it.\n     */\n    if (normalizedMangoQuery.index) {\n        const indexAr = toArray(normalizedMangoQuery.index);\n        if (!indexAr.includes(primaryKey)) {\n            indexAr.push(primaryKey);\n        }\n        normalizedMangoQuery.index = indexAr;\n    }\n\n    /**\n     * To ensure a deterministic sorting,\n     * we have to ensure the primary key is always part\n     * of the sort query.\n     * Primary sorting is added as last sort parameter,\n     * similar to how we add the primary key to indexes that do not have it.\n     *\n     */\n    if (!normalizedMangoQuery.sort) {\n        /**\n         * If no sort is given at all,\n         * we can assume that the user does not care about sort order at al.\n         *\n         * we cannot just use the primary key as sort parameter\n         * because it would likely cause the query to run over the primary key index\n         * which has a bad performance in most cases.\n         */\n        if (normalizedMangoQuery.index) {\n            normalizedMangoQuery.sort = normalizedMangoQuery.index.map((field: string) => ({ [field as any]: 'asc' } as any));\n        } else {\n            /**\n             * Find the index that best matches the fields with the logical operators\n             */\n            if (schema.indexes) {\n                const fieldsWithLogicalOperator: Set<string> = new Set();\n                Object.entries(normalizedMangoQuery.selector).forEach(([field, matcher]) => {\n                    let hasLogical = false;\n                    if (typeof matcher === 'object' && matcher !== null) {\n                        hasLogical = !!Object.keys(matcher).find(operator => LOGICAL_OPERATORS.has(operator));\n                    } else {\n                        hasLogical = true;\n                    }\n                    if (hasLogical) {\n                        fieldsWithLogicalOperator.add(field);\n                    }\n                });\n\n\n                let currentFieldsAmount = -1;\n                let currentBestIndexForSort: string[] | readonly string[] | undefined;\n                schema.indexes.forEach(index => {\n                    const useIndex = isMaybeReadonlyArray(index) ? index : [index];\n                    const firstWrongIndex = useIndex.findIndex(indexField => !fieldsWithLogicalOperator.has(indexField));\n                    if (\n                        firstWrongIndex > 0 &&\n                        firstWrongIndex > currentFieldsAmount\n                    ) {\n                        currentFieldsAmount = firstWrongIndex;\n                        currentBestIndexForSort = useIndex;\n                    }\n                });\n                if (currentBestIndexForSort) {\n                    normalizedMangoQuery.sort = currentBestIndexForSort.map((field: string) => ({ [field as any]: 'asc' } as any));\n                }\n\n            }\n\n            /**\n             * Fall back to the primary key as sort order\n             * if no better one has been found\n             */\n            if (!normalizedMangoQuery.sort) {\n                normalizedMangoQuery.sort = [{ [primaryKey]: 'asc' }] as any;\n            }\n        }\n    } else {\n        const isPrimaryInSort = normalizedMangoQuery.sort\n            .find(p => firstPropertyNameOfObject(p) === primaryKey);\n        if (!isPrimaryInSort) {\n            normalizedMangoQuery.sort = normalizedMangoQuery.sort.slice(0);\n            normalizedMangoQuery.sort.push({ [primaryKey]: 'asc' } as any);\n        }\n    }\n\n    return normalizedMangoQuery;\n}\n"],"mappings":"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"}