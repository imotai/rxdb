{"version":3,"file":"checkpoint.js","names":["getLastCheckpointDoc","state","direction","checkpointDocId","getComposedPrimaryKeyOfDocumentData","RX_REPLICATION_META_INSTANCE_SCHEMA","isCheckpoint","itemId","replicationIdentifier","checkpointKey","input","metaInstance","findDocumentsById","checkpointResult","checkpointDoc","lastCheckpointDoc","data","undefined","setCheckpoint","checkpoint","previousCheckpointDoc","events","canceled","getValue","JSON","stringify","newDoc","id","_deleted","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","stackCheckpoints","lwt","now","createRevision","identifier","bulkWrite","previous","document","result","success","getFromObjectOrThrow","error","status","ensureNotFalsy","documentInDb","getCheckpointKey","hash","fastUnsecureHash","forkInstance","databaseName","collectionName","join"],"sources":["../../../src/replication-protocol/checkpoint.ts"],"sourcesContent":["import { getComposedPrimaryKeyOfDocumentData } from '../rx-schema-helper';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxDocumentData,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection,\n    RxStorageReplicationMeta\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromObjectOrThrow,\n    now\n} from '../plugins/utils';\nimport { RX_REPLICATION_META_INSTANCE_SCHEMA } from './meta-instance';\n\nexport async function getLastCheckpointDoc<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | CheckpointType> {\n    const checkpointDocId = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        {\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey\n        }\n    );\n    const checkpointResult = await state.input.metaInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    state.lastCheckpointDoc[direction] = checkpointDoc;\n    if (checkpointDoc) {\n        return checkpointDoc.data;\n    } else {\n        return undefined;\n    }\n}\n\n\n/**\n * Sets the checkpoint,\n * automatically resolves conflicts that appear.\n */\nexport async function setCheckpoint<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpoint: CheckpointType\n) {\n    let previousCheckpointDoc = state.lastCheckpointDoc[direction];\n    if (\n        checkpoint &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.events.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !previousCheckpointDoc ||\n            JSON.stringify(previousCheckpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const newDoc: RxDocumentData<RxStorageReplicationMeta> = {\n            id: '',\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey,\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision()\n        };\n        newDoc.id = getComposedPrimaryKeyOfDocumentData(\n            RX_REPLICATION_META_INSTANCE_SCHEMA,\n            newDoc\n        );\n        while (true) {\n            /**\n             * Instead of just storign the new checkpoint,\n             * we have to stack up the checkpoint with the previous one.\n             * This is required for plugins like the sharding RxStorage\n             * where the changeStream events only contain a Partial of the\n             * checkpoint.\n             */\n            if (previousCheckpointDoc) {\n                newDoc.data = stackCheckpoints([\n                    previousCheckpointDoc.data,\n                    newDoc.data\n                ]);\n            }\n            newDoc._meta.lwt = now();\n            newDoc._rev = createRevision(\n                state.input.identifier,\n                previousCheckpointDoc\n            );\n            const result = await state.input.metaInstance.bulkWrite([{\n                previous: previousCheckpointDoc,\n                document: newDoc\n            }], 'replication-set-checkpoint');\n\n            if (result.success[newDoc.id]) {\n                state.lastCheckpointDoc[direction] = getFromObjectOrThrow(\n                    result.success,\n                    newDoc.id\n                );\n                return;\n            } else {\n                const error = getFromObjectOrThrow(\n                    result.error,\n                    newDoc.id\n                );\n                if (error.status !== 409) {\n                    throw error;\n                } else {\n                    previousCheckpointDoc = ensureNotFalsy(error.documentInDb);\n                    newDoc._rev = createRevision(\n                        state.input.identifier,\n                        previousCheckpointDoc\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = fastUnsecureHash([\n        input.identifier,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n"],"mappings":"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"}