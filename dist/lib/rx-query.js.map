{"version":3,"file":"rx-query.js","names":["_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","other","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_setResultData","newResultData","docsData","docsMap","Map","docsDataMap","count","docs","time","Array","from","values","map","docData","_docCache","getCachedRxDocument","doc","set","primary","_data","length","_execOverDatabase","preparedQuery","getPreparedQuery","storageInstance","result","mode","database","allowSlowCount","newRxError","queryObj","ids","ensureNotFalsy","selector","$in","ret","mustBeQueried","forEach","getLatestDocumentDataIfExists","_deleted","push","findDocumentsById","Object","docsPromise","queryCollection","then","exec","throwIfMissing","name","query","_ensureEqual","firstValueFrom","$","toString","stringObj","sortObject","value","JSON","stringify","stringifyFilter","hookInput","rxQuery","normalizeMangoQuery","jsonSchema","clone","runPluginHooks","storage","statics","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","update","_updateObj","pluginMissing","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","filter","changeEvent","isLocal","startWith","mergeMap","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","useResult","slice","merge","usePreparedQuery","overwriteGetterForCaching","getQueryMatcher","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","previousCount","newCount","cE","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","latestAfter","areRxDocumentArraysEqual","resolve","docId","queryResult","documents","keys","$eq","isInstanceOf","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy,\n    areRxDocumentArraysEqual\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData\n} from './types';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocType,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocType>[] | RxDocument<RxDocType>\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentData<RxDocType>[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocType>;\n        docsMap: Map<string, RxDocument<RxDocType>>;\n        docs: RxDocument<RxDocType>[];\n        count: number;\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else if (this.op === 'findByIds') {\n                        return useResult.docsMap;\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n\n        if (typeof newResultData === 'number') {\n            this._result = {\n                docsData: [],\n                docsMap: new Map(),\n                docsDataMap: new Map(),\n                count: newResultData,\n                docs: [],\n                time: now()\n            };\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const docsDataMap = new Map();\n        const docsMap = new Map();\n        const docs = newResultData.map(docData => this.collection._docCache.getCachedRxDocument(docData));\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const docsData = docs.map(doc => {\n            docsDataMap.set(doc.primary, doc._data);\n            docsMap.set(doc.primary, doc);\n            return doc._data;\n        });\n\n        this._result = {\n            docsData,\n            docsMap,\n            docsDataMap,\n            count: docsData.length,\n            docs,\n            time: now()\n        };\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                Object.values(docs).forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n\n\n        /**\n         * Instead of calling this.getPreparedQuery(),\n         * we have to prepare the query for the query matcher\n         * so that it does not contain modifications from the hooks\n         * like the key compression.\n         */\n        const usePreparedQuery = this.collection.database.storage.statics.prepareQuery(\n            schema,\n            normalizeMangoQuery(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        );\n\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                schema,\n                usePreparedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase<RxDocType>(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase<any>): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType>): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensuer findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        const docId = rxQuery.isFindOneByIdQuery;\n\n        // first try to fill from docCache\n        let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n        if (!docData) {\n            // otherwise get from storage\n            const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n            docData = docsMap[docId];\n        }\n        if (docData) {\n            docs.push(docData);\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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"}