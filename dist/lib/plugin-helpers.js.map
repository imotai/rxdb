{"version":3,"file":"plugin-helpers.js","names":["VALIDATOR_CACHE_BY_VALIDATOR_KEY","Map","wrappedValidateStorageFactory","getValidator","validatorKey","has","set","VALIDATOR_CACHE","getFromMapOrThrow","initValidator","schema","hash","fastUnsecureHash","JSON","stringify","validator","args","Object","assign","storage","createStorageInstance","params","instance","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","requestIdleCallbackIfAvailable","validatorCached","oldBulkWrite","bulkWrite","bind","documentWrites","context","errors","continueWrites","forEach","row","documentId","document","validationErrors","length","push","status","isError","writeRow","writePromise","Promise","resolve","error","success","then","writeResult","validationError","wrapRxStorageInstance","modifyToStorage","modifyFromStorage","modifyAttachmentFromStorage","v","toStorage","docData","fromStorage","errorFromStorage","ret","flatClone","documentInDb","previous","wrappedInstance","databaseName","internals","cleanup","options","close","collectionName","count","remove","originalStorageInstance","useRows","all","map","undefined","promises","entries","k","v2","err","query","preparedQuery","queryResult","documents","doc","getAttachmentData","attachmentId","data","findDocumentsById","ids","deleted","findResult","key","getChangedDocumentsSince","limit","checkpoint","result","d","changeStream","pipe","mergeMap","eventBulk","events","event","documentData","previousDocumentData","ev","operation","eventId","endTime","startTime","isLocal","useEvents","id","conflictResultionTasks","task","input","assumedMasterState","newDocumentState","realMasterState","resolveConflictResultionTask","taskSolution","output","isEqual","useSolution"],"sources":["../../src/plugin-helpers.ts"],"sourcesContent":["import { mergeMap } from 'rxjs/operators';\nimport { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport { WrappedRxStorageInstance } from './rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxChangeEvent,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxValidationError,\n    RxStorageWriteErrorConflict\n} from './types';\nimport {\n    fastUnsecureHash,\n    flatClone,\n    getFromMapOrThrow,\n    requestIdleCallbackIfAvailable\n} from './plugins/utils';\n\n\ntype WrappedStorageFunction = <Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n) => RxStorage<Internals, InstanceCreationOptions>;\n\n/**\n * Returns the validation errors.\n * If document is fully valid, returns an empty array.\n */\ntype ValidatorFunction = (docData: RxDocumentData<any>) => RxValidationError[];\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE_BY_VALIDATOR_KEY: Map<string, Map<string, ValidatorFunction>> = new Map();\n\n/**\n * This factory is used in the validation plugins\n * so that we can reuse the basic storage wrapping code.\n */\nexport function wrappedValidateStorageFactory(\n    /**\n     * Returns a method that can be used to validate\n     * documents and throws when the document is not valid.\n     */\n    getValidator: (schema: RxJsonSchema<any>) => ValidatorFunction,\n    /**\n     * A string to identify the validation library.\n     */\n    validatorKey: string\n): WrappedStorageFunction {\n    if (!VALIDATOR_CACHE_BY_VALIDATOR_KEY.has(validatorKey)) {\n        VALIDATOR_CACHE_BY_VALIDATOR_KEY.set(validatorKey, new Map());\n    }\n    const VALIDATOR_CACHE = getFromMapOrThrow(VALIDATOR_CACHE_BY_VALIDATOR_KEY, validatorKey);\n\n    function initValidator(\n        schema: RxJsonSchema<any>\n    ): ValidatorFunction {\n        const hash = fastUnsecureHash(JSON.stringify(schema));\n        if (!VALIDATOR_CACHE.has(hash)) {\n            const validator = getValidator(schema);\n            VALIDATOR_CACHE.set(hash, validator);\n            return validator;\n        }\n        return getFromMapOrThrow(VALIDATOR_CACHE, hash);\n    }\n\n    return (args) => {\n        return Object.assign(\n            {},\n            args.storage,\n            {\n                async createStorageInstance<RxDocType>(\n                    params: RxStorageInstanceCreationParams<RxDocType, any>\n                ) {\n                    const instance = await args.storage.createStorageInstance(params);\n                    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n                    /**\n                     * Lazy initialize the validator\n                     * to save initial page load performance.\n                     * Some libraries take really long to initialize the validator\n                     * from the schema.\n                     */\n                    let validatorCached: ValidatorFunction;\n                    requestIdleCallbackIfAvailable(() => validatorCached = initValidator(params.schema));\n\n                    const oldBulkWrite = instance.bulkWrite.bind(instance);\n                    instance.bulkWrite = (\n                        documentWrites: BulkWriteRow<RxDocType>[],\n                        context: string\n                    ) => {\n                        if (!validatorCached) {\n                            validatorCached = initValidator(params.schema);\n                        }\n                        const errors: RxStorageWriteError<RxDocType>[] = [];\n                        const continueWrites: typeof documentWrites = [];\n                        documentWrites.forEach(row => {\n                            const documentId: string = row.document[primaryPath] as any;\n                            const validationErrors = validatorCached(row.document);\n                            if (validationErrors.length > 0) {\n                                errors.push({\n                                    status: 422,\n                                    isError: true,\n                                    documentId,\n                                    writeRow: row,\n                                    validationErrors\n                                });\n                            } else {\n                                continueWrites.push(row);\n                            }\n                        });\n                        const writePromise: Promise<RxStorageBulkWriteResponse<RxDocType>> = continueWrites.length > 0 ? oldBulkWrite(continueWrites, context) : Promise.resolve({ error: {}, success: {} });\n                        return writePromise.then(writeResult => {\n                            errors.forEach(validationError => {\n                                writeResult.error[validationError.documentId] = validationError;\n                            });\n                            return writeResult;\n                        });\n                    };\n\n                    return instance;\n                }\n            }\n        );\n    };\n\n}\n\n\n\n/**\n * Used in plugins to easily modify all in- and outgoing\n * data of that storage instance.\n */\nexport function wrapRxStorageInstance<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    modifyToStorage: (docData: RxDocumentWriteData<RxDocType>) => Promise<RxDocumentData<any>> | RxDocumentData<any>,\n    modifyFromStorage: (docData: RxDocumentData<any>) => Promise<RxDocumentData<RxDocType>> | RxDocumentData<RxDocType>,\n    modifyAttachmentFromStorage: (attachmentData: string) => Promise<string> | string = (v) => v\n): WrappedRxStorageInstance<RxDocType, any, any> {\n    async function toStorage(docData: RxDocumentWriteData<RxDocType>): Promise<RxDocumentData<any>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyToStorage(docData);\n    }\n    async function fromStorage(docData: RxDocumentData<any> | null): Promise<RxDocumentData<RxDocType>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyFromStorage(docData);\n    }\n    async function errorFromStorage(\n        error: RxStorageWriteError<any>\n    ): Promise<RxStorageWriteError<RxDocType>> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n        if ((ret as RxStorageWriteErrorConflict<any>).documentInDb) {\n            (ret as RxStorageWriteErrorConflict<any>).documentInDb = await fromStorage((ret as RxStorageWriteErrorConflict<any>).documentInDb);\n        }\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = await fromStorage(ret.writeRow.previous);\n        }\n        ret.writeRow.document = await fromStorage(ret.writeRow.document);\n        return ret;\n    }\n\n\n    const wrappedInstance: WrappedRxStorageInstance<RxDocType, any, any> = {\n        databaseName: instance.databaseName,\n        internals: instance.internals,\n        cleanup: instance.cleanup.bind(instance),\n        options: instance.options,\n        close: instance.close.bind(instance),\n        schema: instance.schema,\n        collectionName: instance.collectionName,\n        count: instance.count.bind(instance),\n        remove: instance.remove.bind(instance),\n        originalStorageInstance: instance,\n        bulkWrite: async (\n            documentWrites: BulkWriteRow<RxDocType>[],\n            context: string\n        ) => {\n            const useRows: BulkWriteRow<any>[] = [];\n            await Promise.all(\n                documentWrites.map(async (row) => {\n                    const [previous, document] = await Promise.all([\n                        row.previous ? toStorage(row.previous) : undefined,\n                        toStorage(row.document)\n                    ]);\n                    useRows.push({ previous, document });\n                })\n            );\n\n            const writeResult = await instance.bulkWrite(useRows, context);\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n            const promises: Promise<any>[] = [];\n            Object.entries(writeResult.success).forEach(([k, v]) => {\n                promises.push(\n                    fromStorage(v).then(v2 => ret.success[k] = v2)\n                );\n            });\n            Object.entries(writeResult.error).forEach(([k, error]) => {\n                promises.push(\n                    errorFromStorage(error).then(err => ret.error[k] = err)\n                );\n            });\n            await Promise.all(promises);\n            return ret;\n        },\n        query: (preparedQuery) => {\n            return instance.query(preparedQuery)\n                .then(queryResult => {\n                    return Promise.all(queryResult.documents.map(doc => fromStorage(doc)));\n                })\n                .then(documents => ({ documents: documents as any }));\n        },\n        getAttachmentData: async (\n            documentId: string,\n            attachmentId: string\n        ) => {\n            let data = await instance.getAttachmentData(documentId, attachmentId);\n            data = await modifyAttachmentFromStorage(data);\n            return data;\n        },\n        findDocumentsById: (ids, deleted) => {\n            return instance.findDocumentsById(ids, deleted)\n                .then(async (findResult) => {\n                    const ret: RxDocumentDataById<RxDocType> = {};\n                    await Promise.all(\n                        Object.entries(findResult)\n                            .map(async ([key, doc]) => {\n                                ret[key] = await fromStorage(doc);\n                            })\n                    );\n                    return ret;\n                });\n        },\n        getChangedDocumentsSince: (limit, checkpoint) => {\n            return instance.getChangedDocumentsSince(limit, checkpoint)\n                .then(async (result) => {\n                    return {\n                        checkpoint: result.checkpoint,\n                        documents: await Promise.all(\n                            result.documents.map(d => fromStorage(d))\n                        )\n                    };\n                });\n        },\n        changeStream: () => {\n            return instance.changeStream().pipe(\n                mergeMap(async (eventBulk) => {\n                    const useEvents = await Promise.all(\n                        eventBulk.events.map(async (event) => {\n                            const [\n                                documentData,\n                                previousDocumentData\n                            ] = await Promise.all([\n                                fromStorage(event.documentData),\n                                fromStorage(event.previousDocumentData)\n                            ]);\n                            const ev: RxChangeEvent<RxDocType> = {\n                                operation: event.operation,\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                documentData: documentData as any,\n                                previousDocumentData: previousDocumentData as any,\n                                isLocal: false\n                            };\n                            return ev;\n                        })\n                    );\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n                        id: eventBulk.id,\n                        events: useEvents,\n                        checkpoint: eventBulk.checkpoint,\n                        context: eventBulk.context\n                    };\n                    return ret;\n                })\n            );\n        },\n        conflictResultionTasks: () => {\n            return instance.conflictResultionTasks().pipe(\n                mergeMap(async (task) => {\n                    const assumedMasterState = await fromStorage(task.input.assumedMasterState);\n                    const newDocumentState = await fromStorage(task.input.newDocumentState);\n                    const realMasterState = await fromStorage(task.input.realMasterState);\n                    return {\n                        id: task.id,\n                        context: task.context,\n                        input: {\n                            assumedMasterState,\n                            realMasterState,\n                            newDocumentState\n                        }\n                    };\n                })\n            );\n        },\n        resolveConflictResultionTask: (taskSolution) => {\n            if (taskSolution.output.isEqual) {\n                return instance.resolveConflictResultionTask(taskSolution);\n            }\n            const useSolution = {\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData: taskSolution.output.documentData\n                }\n            };\n            return instance.resolveConflictResultionTask(useSolution);\n        }\n    };\n\n    return wrappedInstance;\n}\n"],"mappings":"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"}