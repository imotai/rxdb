{"version":3,"file":"rx-database-internal-store.js","names":["INTERNAL_CONTEXT_COLLECTION","INTERNAL_CONTEXT_STORAGE_TOKEN","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","fillWithDefaultSettings","version","title","primaryKey","key","fields","separator","type","properties","id","maxLength","context","data","additionalProperties","indexes","required","sharding","shards","mode","getPrimaryKeyOfInternalDocument","getComposedPrimaryKeyOfDocumentData","getAllCollectionDocuments","storageStatics","storageInstance","getAllQueryPrepared","prepareQuery","schema","selector","sort","skip","query","queryResult","allDocs","documents","STORAGE_TOKEN_DOCUMENT_KEY","STORAGE_TOKEN_DOCUMENT_ID","ensureStorageTokenDocumentExists","rxDatabase","storageToken","randomCouchString","passwordHash","password","fastUnsecureHash","undefined","docData","token","instanceToken","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","internalStore","bulkWrite","document","writeResult","success","error","ensureNotFalsy","isError","status","conflictError","documentInDb","newRxError","existingPasswordHash","storageTokenDocInDb","addConnectedStorageToCollection","collection","storageCollectionName","collectionNameWithVersion","_collectionNamePrimary","name","jsonSchema","collectionDocId","getSingleDocument","database","collectionDoc","saveData","clone","connectedStorages","alreadyThere","find","row","collectionName","push","writeSingle","previous","isBulkWriteConflictError"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    newRxError\n} from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageInstance,\n    RxStorageStatics,\n    RxStorageWriteErrorConflict\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    );\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageStatics: RxStorageStatics,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storageStatics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ? fastUnsecureHash(rxDatabase.password) : undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageWriteErrorConflict<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== conflictError.documentInDb.data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: conflictError.documentInDb.data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n        /**\n         * Add array if not exist for backwards compatibility\n         * TODO remove this in 2023\n         */\n        if (!saveData.data.connectedStorages) {\n            saveData.data.connectedStorages = [];\n        }\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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"}