{"version":3,"file":"rx-storage-instance-loki.js","names":["instanceId","now","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","remove","resolveConflictResultionTask","awaitLeadership","then","ensureNotFalsy","broadcastChannel","addEventListener","msg","handleRemoteRequest","documentWrites","context","length","newRxError","args","mustUseLocalState","localState","requestRemoteInstance","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","stripLokiKey","categorized","categorizeBulkWriteRows","errors","bulkInsertDocs","docId","insert","flatClone","bulkUpdateDocs","documentInDbWithLokiKey","getFromMapOrThrow","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","getNewestOfDocumentStates","values","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","chain","find","selector","sort","getLokiSortComparator","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","result","mode","_documentId","_attachmentId","Error","sinceLwt","RX_META_LWT_MINIMUM","$gte","getSortDocumentsByLastWriteTimeComparator","changedDocs","first","shift","slice","lastDoc","lastOfArray","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","Promise","reject","complete","getLokiDatabase","dbState","run","closeLokiCollections","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","isMaybeReadonlyArray","push","lokiCollectionName","version","collectionOptions","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","getLokiLeaderElector","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_LOKIJS","undefined","closeBefore","removeBroadcastChannelReference","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../utils';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}