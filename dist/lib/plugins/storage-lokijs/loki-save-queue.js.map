{"version":3,"file":"loki-save-queue.js","names":["LokiSaveQueue","lokiDatabase","databaseSettings","writesSinceLastRun","saveQueue","PROMISE_RESOLVE_VOID","saveQueueC","addWrite","run","adapter","then","requestIdlePromise","writeAmount","Promise","res","rej","saveDatabase","err","autosaveCallback"],"sources":["../../../../src/plugins/storage-lokijs/loki-save-queue.ts"],"sourcesContent":["import type { LokiDatabaseSettings } from '../../types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../utils';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n\n    /**\n     * Ensures that we do not run multiple saves\n     * in parallel\n     */\n    public saveQueue: Promise<void> = PROMISE_RESOLVE_VOID;\n    // track amount of non-finished save calls in the queue.\n    public saveQueueC = 0;\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public run() {\n        if (\n            // no persistence adapter given, so we do not need to save\n            !this.databaseSettings.adapter ||\n            // do not add more then two pending calls to the queue.\n            this.saveQueueC > 2\n\n        ) {\n            return this.saveQueue;\n        }\n\n        this.saveQueueC = this.saveQueueC + 1;\n        this.saveQueue = this.saveQueue\n            .then(async () => {\n                /**\n                 * Always wait until the JavaScript process is idle.\n                 * This ensures that CPU blocking writes are finished\n                 * before we proceed.\n                 */\n                await requestIdlePromise();\n\n                // no write happened since the last save call\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                /**\n                 * Because LokiJS is a in-memory database,\n                 * we can just wait until the JavaScript process is idle\n                 * via requestIdlePromise(). Then we know that nothing important\n                 * is running at the moment.\n                 */\n                await requestIdlePromise().then(() => requestIdlePromise());\n\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                const writeAmount = this.writesSinceLastRun;\n                this.writesSinceLastRun = 0;\n                return new Promise<void>((res, rej) => {\n                    this.lokiDatabase.saveDatabase(err => {\n                        if (err) {\n                            this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                            rej(err);\n                        } else {\n                            if (this.databaseSettings.autosaveCallback) {\n                                this.databaseSettings.autosaveCallback();\n                            }\n                            res();\n                        }\n                    });\n                });\n            })\n            .catch(() => { })\n            .then(() => {\n                this.saveQueueC = this.saveQueueC - 1;\n            });\n        return this.saveQueue;\n    }\n}\n"],"mappings":";;;;;;;;;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOaA,aAAa;EAGtB;AACJ;AACA;AACA;;EAEI;;EAGA,uBACoBC,YAAkB,EAClBC,gBAAsC,EACxD;IAAA,KAbKC,kBAAkB,GAAW,CAAC;IAAA,KAM9BC,SAAS,GAAkBC,2BAAoB;IAAA,KAE/CC,UAAU,GAAG,CAAC;IAAA,KAGDL,YAAkB,GAAlBA,YAAkB;IAAA,KAClBC,gBAAsC,GAAtCA,gBAAsC;EAG1D;EAAC;EAAA,OAEMK,QAAQ,GAAf,oBAAkB;IACd,IAAI,CAACJ,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,GAAG,CAAC;IACrD,IAAI,CAACK,GAAG,EAAE;EACd,CAAC;EAAA,OAEMA,GAAG,GAAV,eAAa;IAAA;IACT;IACI;IACA,CAAC,IAAI,CAACN,gBAAgB,CAACO,OAAO;IAC9B;IACA,IAAI,CAACH,UAAU,GAAG,CAAC,EAErB;MACE,OAAO,IAAI,CAACF,SAAS;IACzB;IAEA,IAAI,CAACE,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG,CAAC;IACrC,IAAI,CAACF,SAAS,GAAG,IAAI,CAACA,SAAS,CAC1BM,IAAI,6FAAC;MAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAMI,IAAAC,yBAAkB,GAAE;UAAA;YAAA,MAGtB,KAAI,CAACR,kBAAkB,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAAA,OAU3B,IAAAQ,yBAAkB,GAAE,CAACD,IAAI,CAAC;cAAA,OAAM,IAAAC,yBAAkB,GAAE;YAAA,EAAC;UAAA;YAAA,MAEvD,KAAI,CAACR,kBAAkB,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA;UAAA;YAI3BS,WAAW,GAAG,KAAI,CAACT,kBAAkB;YAC3C,KAAI,CAACA,kBAAkB,GAAG,CAAC;YAAC,iCACrB,IAAIU,OAAO,CAAO,UAACC,GAAG,EAAEC,GAAG,EAAK;cACnC,KAAI,CAACd,YAAY,CAACe,YAAY,CAAC,UAAAC,GAAG,EAAI;gBAClC,IAAIA,GAAG,EAAE;kBACL,KAAI,CAACd,kBAAkB,GAAG,KAAI,CAACA,kBAAkB,GAAGS,WAAW;kBAC/DG,GAAG,CAACE,GAAG,CAAC;gBACZ,CAAC,MAAM;kBACH,IAAI,KAAI,CAACf,gBAAgB,CAACgB,gBAAgB,EAAE;oBACxC,KAAI,CAAChB,gBAAgB,CAACgB,gBAAgB,EAAE;kBAC5C;kBACAJ,GAAG,EAAE;gBACT;cACJ,CAAC,CAAC;YACN,CAAC,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACL,GAAC,SACI,CAAC,YAAM,CAAE,CAAC,CAAC,CAChBJ,IAAI,CAAC,YAAM;MACR,KAAI,CAACJ,UAAU,GAAG,KAAI,CAACA,UAAU,GAAG,CAAC;IACzC,CAAC,CAAC;IACN,OAAO,IAAI,CAACF,SAAS;EACzB,CAAC;EAAA;AAAA;AAAA"}