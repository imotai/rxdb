{"version":3,"file":"index.js","names":["MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","AES","encrypt","toString","decryptString","cipherText","newRxError","args","decrypted","decrypt","ret","cryptoEnc","wrappedKeyEncryptionStorage","Object","assign","storage","createStorageInstance","params","modifyToStorage","modifyFromStorage","modifyAttachmentFromStorage","attachmentData","schema","attachments","b64DecodeUnicode","docData","cloneWithoutAttachments","ensureNotFalsy","forEach","path","objectPath","get","decryptedParsed","JSON","parse","set","stringValue","stringify","newAttachments","entries","_attachments","id","attachment","useAttachment","flatClone","data","dataString","b64EncodeUnicode","hasEncryption","retInstance","title","INTERNAL_STORE_SCHEMA_TITLE","validatePassword","close","database","databaseName","collection","collectionName","schemaWithoutEncrypted","clone","instance","wrapRxStorageInstance","newRxTypeError","length","minPassLength"],"sources":["../../../../src/plugins/encryption/index.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport objectPath from 'object-path';\nimport { wrapRxStorageInstance } from '../../plugin-helpers';\nimport {\n    INTERNAL_STORE_SCHEMA_TITLE\n} from '../../rx-database-internal-store';\nimport { newRxError, newRxTypeError } from '../../rx-error';\nimport { hasEncryption } from '../../rx-storage-helper';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone\n} from '../../plugins/utils';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    if (\n                        params.schema.title === INTERNAL_STORE_SCHEMA_TITLE &&\n                        params.password\n                    ) {\n                        try {\n                            validatePassword(params.password);\n                        } catch (err) {\n                            /**\n                             * Even if the checks fail,\n                             * we have to clean up.\n                             */\n                            await retInstance.close();\n                            throw err;\n                        }\n                    }\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            objectPath.set(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            objectPath.set(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data as any;\n}\n\nfunction validatePassword(password: any) {\n    if (password && typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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"}