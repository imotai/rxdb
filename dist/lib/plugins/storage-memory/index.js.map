{"version":3,"file":"index.js","names":["COLLECTION_STATES","Map","getRxStorageMemory","settings","storage","name","statics","RxStorageDexieStatics","collectionStates","createStorageInstance","params","ensureRxStorageInstanceParamsAreCorrect","flatClone","collectionName","schema","version","useSettings","Object","assign","options","createMemoryStorageInstance"],"sources":["../../../../src/plugins/storage-memory/index.ts"],"sourcesContent":["import { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport type { RxStorageInstanceCreationParams } from '../../types';\nimport { flatClone } from '../../plugins/utils';\nimport { RxStorageDexieStatics } from '../storage-dexie/dexie-statics';\nimport type {\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\nimport {\n    createMemoryStorageInstance,\n    RxStorageInstanceMemory\n} from './rx-storage-instance-memory';\n\n/**\n * Keep the state even when the storage instance is closed.\n * This makes it easier to use the memory storage\n * to test filesystem-like and multiInstance behaviors.\n */\nconst COLLECTION_STATES = new Map();\n\nexport function getRxStorageMemory(\n    settings: RxStorageMemorySettings = {}\n): RxStorageMemory {\n\n    const storage: RxStorageMemory = {\n        name: 'memory',\n        statics: RxStorageDexieStatics,\n        collectionStates: COLLECTION_STATES,\n        createStorageInstance<RxDocType>(\n            params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>\n        ): Promise<RxStorageInstanceMemory<RxDocType>> {\n            ensureRxStorageInstanceParamsAreCorrect(params);\n\n            // TODO we should not need to append the schema version here.\n            params = flatClone(params);\n            params.collectionName = params.collectionName + '-' + params.schema.version;\n\n            const useSettings = Object.assign(\n                {},\n                settings,\n                params.options\n            );\n\n\n            return createMemoryStorageInstance(this, params, useSettings);\n        }\n    };\n\n    return storage;\n}\n\n\nexport * from './memory-helper';\nexport * from './binary-search-bounds';\nexport * from './memory-types';\nexport * from './memory-indexes';\nexport * from './rx-storage-instance-memory';\n"],"mappings":";;;;;;;;;AAAA;AAEA;AACA;AAMA;AAgDA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAJA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AA1CA;AACA;AACA;AACA;AACA;AACA,IAAMA,iBAAiB,GAAG,IAAIC,GAAG,EAAE;AAE5B,SAASC,kBAAkB,GAEf;EAAA,IADfC,QAAiC,uEAAG,CAAC,CAAC;EAGtC,IAAMC,OAAwB,GAAG;IAC7BC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAEC,mCAAqB;IAC9BC,gBAAgB,EAAER,iBAAiB;IACnCS,qBAAqB,iCACjBC,MAA0F,EAC/C;MAC3C,IAAAC,wDAAuC,EAACD,MAAM,CAAC;;MAE/C;MACAA,MAAM,GAAG,IAAAE,gBAAS,EAACF,MAAM,CAAC;MAC1BA,MAAM,CAACG,cAAc,GAAGH,MAAM,CAACG,cAAc,GAAG,GAAG,GAAGH,MAAM,CAACI,MAAM,CAACC,OAAO;MAE3E,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAC7B,CAAC,CAAC,EACFf,QAAQ,EACRO,MAAM,CAACS,OAAO,CACjB;MAGD,OAAO,IAAAC,oDAA2B,EAAC,IAAI,EAAEV,MAAM,EAAEM,WAAW,CAAC;IACjE;EACJ,CAAC;EAED,OAAOZ,OAAO;AAClB"}