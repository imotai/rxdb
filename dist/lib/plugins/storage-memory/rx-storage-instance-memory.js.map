{"version":3,"file":"rx-storage-instance-memory.js","names":["RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","context","ensureNotRemoved","ret","success","error","categorized","categorizeBulkWriteRows","documents","errors","stateByIndex","Object","values","byIndex","bulkInsertDocs","forEach","writeRow","docId","document","putWriteRowToState","undefined","bulkUpdateDocs","get","attachmentsMap","attachments","attachmentsAdd","attachment","set","attachmentMapKey","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","getNewestOfDocumentStates","checkpoint","id","lwt","_meta","changes$","next","Promise","resolve","findDocumentsById","docIds","withDeleted","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","RxStorageDexieStatics","getQueryMatcher","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","inclusiveStart","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","inclusiveEnd","indexName","getMemoryIndexName","docsWithIndex","indexOfLower","boundGE","indexString","compareDocsWithIndex","indexOfUpper","boundLE","rows","done","currentDoc","doc","push","sortComparator","getSortComparator","sort","slice","count","result","mode","getChangedDocumentsSince","sinceLwt","RX_META_LWT_MINIMUM","sinceId","boundGT","lastDoc","lastOfArray","cleanup","minimumDeletedTime","maxDeletionTime","now","removeDocFromState","PROMISE_RESOLVE_TRUE","getAttachmentData","data","getFromMapOrThrow","changeStream","asObservable","remove","removed","collectionStates","getMemoryCollectionKey","close","reject","Error","refCount","PROMISE_RESOLVE_VOID","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","Map","Subject","addIndexesToInternalsState","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import { QueryMatcher } from 'event-reduce-js';\nimport {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils';\nimport { RxStorageDexieStatics } from '../storage-dexie/dexie-statics';\nimport {\n    boundGE,\n    boundGT,\n    boundLE\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            this.internals.documents,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                this.internals.documents.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        /**\n         * Handle attachments\n         */\n        const attachmentsMap = this.internals.attachments;\n        categorized.attachmentsAdd.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            attachmentsMap.delete(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId)\n            );\n        });\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.internals.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve(ret);\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const ret: RxDocumentDataById<RxDocType> = {};\n        docIds.forEach(docId => {\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        });\n        return Promise.resolve(ret);\n    }\n\n    query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n                this.schema,\n                preparedQuery\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound,\n            queryPlan.inclusiveStart\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound,\n            queryPlan.inclusiveEnd\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n        const indexOfUpper = boundLE(\n            docsWithIndex,\n            {\n                indexString: upperBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n\n            if (\n                !currentDoc ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n\n            if (!queryMatcher || queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = RxStorageDexieStatics.getSortComparator(this.schema, preparedQuery);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ],\n            false\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ],\n            false\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.internals.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(this.databaseName, this.collectionName)\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n\n        this.internals.refCount = this.internals.refCount - 1;\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(params.databaseName, params.collectionName);\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject(),\n            changes$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}