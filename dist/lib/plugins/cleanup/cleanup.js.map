{"version":3,"file":"cleanup.js","names":["RXSOTRAGE_CLEANUP_QUEUE","PROMISE_RESOLVE_TRUE","startCleanupForRxCollection","rxCollection","rxDatabase","database","cleanupPolicy","Object","assign","DEFAULT_CLEANUP_POLICY","promiseWait","minimumCollectionAge","destroyed","waitForLeadership","cleanupRxCollection","runCleanupAfterDelete","storageInstance","isDone","awaitReplicationsInSync","replicationStates","REPLICATION_STATE_BY_COLLECTION","get","Promise","all","map","replicationState","isStopped","awaitInSync","requestIdlePromise","then","cleanup","minimumDeletedTime","runEach"],"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types';\nimport { PROMISE_RESOLVE_TRUE } from '../../plugins/utils';\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication';\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper';\n\n/**\n * Even on multiple databases,\n * the calls to RxStorage().cleanup()\n * must never run in parallel.\n * The cleanup is a background task which should\n * not affect the performance of other, more important tasks.\n */\nlet RXSOTRAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\n\nexport async function startCleanupForRxCollection(\n    rxCollection: RxCollection\n) {\n    const rxDatabase = rxCollection.database;\n    const cleanupPolicy = Object.assign(\n        {},\n        DEFAULT_CLEANUP_POLICY,\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\n    );\n\n    /**\n     * Wait until minimumDatabaseInstanceAge is reached\n     * or collection is destroyed.\n     */\n    await rxCollection.promiseWait(cleanupPolicy.minimumCollectionAge);\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    if (cleanupPolicy.waitForLeadership) {\n        await rxDatabase.waitForLeadership();\n    }\n    if (rxCollection.destroyed) {\n        return;\n    }\n\n    // initially cleanup the collection\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\n\n    /**\n     * Afterwards we listen to deletes\n     * and only re-run the cleanup after\n     * minimumDeletedTime is reached.\n     */\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\n}\n\n/**\n * Runs the cleanup for a single RxCollection\n */\nexport async function cleanupRxCollection(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    const rxDatabase = rxCollection.database;\n    const storageInstance = rxCollection.storageInstance;\n\n    // run cleanup() until it returns true\n    let isDone = false;\n    while (!isDone && !rxCollection.destroyed) {\n        if (cleanupPolicy.awaitReplicationsInSync) {\n            const replicationStates = REPLICATION_STATE_BY_COLLECTION.get(rxCollection);\n            if (replicationStates) {\n                await Promise.all(\n                    replicationStates.map(replicationState => {\n                        if (!replicationState.isStopped()) {\n                            return replicationState.awaitInSync();\n                        }\n                    })\n                );\n            }\n        }\n\n        await rxDatabase.requestIdlePromise();\n        if (rxCollection.destroyed) {\n            return;\n        }\n        RXSOTRAGE_CLEANUP_QUEUE = RXSOTRAGE_CLEANUP_QUEUE\n            .then(() => {\n                if (rxCollection.destroyed) {\n                    return true;\n                }\n                return storageInstance.cleanup(cleanupPolicy.minimumDeletedTime);\n            });\n        isDone = await RXSOTRAGE_CLEANUP_QUEUE;\n    }\n}\n\nexport async function runCleanupAfterDelete(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    while (!rxCollection.destroyed) {\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\n        if (rxCollection.destroyed) {\n            return;\n        }\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\n    }\n}\n"],"mappings":"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"}