{"version":3,"file":"index.js","names":["ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","newRxError","link","_assignMethodsToAttachment","attachment","Object","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","id","type","length","digest","remove","incrementalWriteQueue","addWrite","_data","docWriteData","_attachments","then","getData","storageInstance","getAttachmentData","primary","plainDataBase64","blobBufferUtil","createBlobBufferFromBase64","ret","getStringData","data","toString","asString","fromStorageInstanceResult","attachmentData","rxDocument","putAttachment","dataSize","size","toBase64String","dataString","flatClone","writeResult","newDocument","_docCache","getCachedRxDocument","attachmentDataOfId","getAttachment","docData","allAttachments","keys","map","preMigrateDocument","newAttachments","Promise","all","attachmentId","docPrimary","oldCollection","primaryPath","rawAttachmentData","postMigrateDocument","_action","PROMISE_RESOLVE_VOID","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","$","pipe","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobBufferUtil,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils';\nimport {\n    newRxError\n} from '../../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../../types';\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        return this.doc.collection.incrementalWriteQueue.addWrite(\n            this.doc._data,\n            docWriteData => {\n                delete docWriteData._attachments[this.id];\n                return docWriteData;\n            }\n        ).then(() => { });\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult<RxDocType>(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument<RxDocType>\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreator\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    return this.collection.incrementalWriteQueue.addWrite(\n        this._data,\n        (docWriteData: RxDocumentWriteData<RxDocType>) => {\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                length: dataSize,\n                type,\n                data\n            };\n            return docWriteData;\n        }).then(writeResult => {\n            const newDocument = this.collection._docCache.getCachedRxDocument(writeResult);\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                newDocument\n            );\n            return attachment;\n        });\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$(this: RxDocument) {\n                    return this.$\n                        .pipe(\n                            map(data => Object.entries(\n                                data._attachments\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}