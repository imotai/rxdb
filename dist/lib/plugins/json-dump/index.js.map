{"version":3,"file":"index.js","names":["dumpRxDatabase","collections","json","name","instanceToken","token","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","newRxError","colDump","importJSON","dumpRxCollection","schemaHash","schema","hash","docs","query","createRxQuery","_getDefaultQuery","queryCollection","docData","flatClone","_rev","_attachments","importDumpRxCollection","exportedJSON","own","storageInstance","bulkWrite","document","assign","_meta","lwt","now","getDefaultRevision","_deleted","RxDBJsonDumpPlugin","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"sources":["../../../../src/plugins/json-dump/index.ts"],"sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    createRxQuery,\n    queryCollection,\n    _getDefaultQuery\n} from '../../rx-query';\nimport {\n    newRxError\n} from '../../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData\n} from '../../types';\nimport {\n    flatClone,\n    getDefaultRevision,\n    now\n} from '../../plugins/utils';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        collections: []\n    };\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON())\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection\n) {\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        docs: []\n    };\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return queryCollection(query)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                docData = flatClone(docData);\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    const docs: RxDocType[] = exportedJSON.docs;\n    return this.storageInstance.bulkWrite(\n        docs.map(docData => {\n            const document: RxDocumentData<RxDocType> = Object.assign(\n                {},\n                docData,\n                {\n                    _meta: {\n                        lwt: now()\n                    },\n                    _rev: getDefaultRevision(),\n                    _attachments: {},\n                    _deleted: false\n                }\n            );\n            return {\n                document\n            };\n        }),\n        'json-dump-import'\n    );\n}\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.exportJSON = dumpRxDatabase;\n            proto.importJSON = importDumpRxDatabase;\n        },\n        RxCollection: (proto: any) => {\n            proto.exportJSON = dumpRxCollection;\n            proto.importJSON = importDumpRxCollection;\n        }\n    },\n    overwritable: {}\n};\n"],"mappings":"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"}