{"version":3,"file":"index.js","names":["DATA_MIGRATOR_BY_COLLECTION","WeakMap","RxDBMigrationPlugin","name","rxdb","hooks","preDestroyRxDatabase","after","onDatabaseDestroy","prototypes","RxDatabase","proto","migrationStates","getMigrationStateByDatabase","pipe","switchMap","list","combineLatest","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","RxCollection","getDataMigrator","has","set","DataMigrator","asRxCollection","migrationStrategies","get","migrationNeeded","schema","version","PROMISE_RESOLVE_FALSE","mustMigrate"],"sources":["../../../../src/plugins/migration/index.ts"],"sourcesContent":["import {\n    combineLatest,\n    Observable\n} from 'rxjs';\nimport {\n    shareReplay,\n    switchMap\n} from 'rxjs/operators';\nimport type {\n    RxPlugin,\n    RxCollection,\n    RxDatabase,\n    AllMigrationStates\n} from '../../types';\nimport { PROMISE_RESOLVE_FALSE, RXJS_SHARE_REPLAY_DEFAULTS } from '../../plugins/utils';\nimport {\n    mustMigrate,\n    DataMigrator\n} from './data-migrator';\nimport {\n    getMigrationStateByDatabase,\n    onDatabaseDestroy\n} from './migration-state';\n\nexport const DATA_MIGRATOR_BY_COLLECTION: WeakMap<RxCollection, DataMigrator> = new WeakMap();\n\nexport const RxDBMigrationPlugin: RxPlugin = {\n    name: 'migration',\n    rxdb: true,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDatabaseDestroy\n        }\n    },\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.migrationStates = function (this: RxDatabase): Observable<AllMigrationStates> {\n                return getMigrationStateByDatabase(this).pipe(\n                    switchMap(list => combineLatest(list)),\n                    shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n                );\n            };\n        },\n        RxCollection: (proto: any) => {\n            proto.getDataMigrator = function (this: RxCollection): DataMigrator {\n                if (!DATA_MIGRATOR_BY_COLLECTION.has(this)) {\n                    DATA_MIGRATOR_BY_COLLECTION.set(\n                        this,\n                        new DataMigrator(\n                            this.asRxCollection,\n                            this.migrationStrategies\n                        )\n                    );\n\n                }\n                return DATA_MIGRATOR_BY_COLLECTION.get(this) as any;\n            };\n            proto.migrationNeeded = function (this: RxCollection) {\n                if (this.schema.version === 0) {\n                    return PROMISE_RESOLVE_FALSE;\n                }\n                return mustMigrate(this.getDataMigrator());\n            };\n        }\n    }\n};\n\n\n// used in tests\nexport {\n    _getOldCollections,\n    getBatchOfOldCollection,\n    migrateDocumentData,\n    _migrateDocuments,\n    deleteOldCollection,\n    migrateOldCollection,\n    migratePromise,\n    DataMigrator\n} from './data-migrator';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AAUA;AACA;AAIA;AAKO,IAAMA,2BAAgE,GAAG,IAAIC,OAAO,EAAE;AAAC;AAEvF,IAAMC,mBAA6B,GAAG;EACzCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEC;IACX;EACJ,CAAC;EACDC,UAAU,EAAE;IACRC,UAAU,EAAE,oBAACC,KAAU,EAAK;MACxBA,KAAK,CAACC,eAAe,GAAG,YAA4D;QAChF,OAAO,IAAAC,2CAA2B,EAAC,IAAI,CAAC,CAACC,IAAI,CACzC,IAAAC,oBAAS,EAAC,UAAAC,IAAI;UAAA,OAAI,IAAAC,mBAAa,EAACD,IAAI,CAAC;QAAA,EAAC,EACtC,IAAAE,sBAAW,EAACC,iCAA0B,CAAC,CAC1C;MACL,CAAC;IACL,CAAC;IACDC,YAAY,EAAE,sBAACT,KAAU,EAAK;MAC1BA,KAAK,CAACU,eAAe,GAAG,YAA4C;QAChE,IAAI,CAACrB,2BAA2B,CAACsB,GAAG,CAAC,IAAI,CAAC,EAAE;UACxCtB,2BAA2B,CAACuB,GAAG,CAC3B,IAAI,EACJ,IAAIC,0BAAY,CACZ,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,mBAAmB,CAC3B,CACJ;QAEL;QACA,OAAO1B,2BAA2B,CAAC2B,GAAG,CAAC,IAAI,CAAC;MAChD,CAAC;MACDhB,KAAK,CAACiB,eAAe,GAAG,YAA8B;QAClD,IAAI,IAAI,CAACC,MAAM,CAACC,OAAO,KAAK,CAAC,EAAE;UAC3B,OAAOC,4BAAqB;QAChC;QACA,OAAO,IAAAC,yBAAW,EAAC,IAAI,CAACX,eAAe,EAAE,CAAC;MAC9C,CAAC;IACL;EACJ;AACJ,CAAC;;AAGD;AAAA"}