{"version":3,"file":"index.js","names":["COMPRESSION_STATE_BY_SCHEMA","WeakMap","getCompressionStateByRxJsonSchema","schema","overwritable","deepFreezeWhenDevMode","compressionState","get","compressionSchema","flatClone","primaryKey","table","createCompressionTable","DEFAULT_COMPRESSION_FLAG","getPrimaryFieldOfPrimaryKey","compressedSchema","createCompressedJsonSchema","composedPrimary","newComposedPrimary","key","compressedPath","fields","map","field","separator","indexes","newIndexes","idx","isMaybeReadonlyArray","subIdx","set","wrappedKeyCompressionStorage","args","statics","Object","assign","storage","prepareQuery","mutateableQuery","keyCompression","compressQuery","getSortComparator","preparedQuery","comparator","a","b","compressedDocDataA","compressObject","compressedDocDataB","res","getQueryMatcher","matcher","docData","compressedDocData","ret","createStorageInstance","params","modifyToStorage","modifyFromStorage","decompressDocumentData","compressDocumentData","childSchema","instance","wrapRxStorageInstance","flatCloneDocWithMeta","attachments","_attachments","decompressObject"],"sources":["../../../../src/plugins/key-compression/index.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema,\n    compressQuery\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../../overwritable';\nimport { wrapRxStorageInstance } from '../../plugin-helpers';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../../rx-storage-helper';\n\nimport type {\n    RxJsonSchema,\n    CompositePrimaryKey,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxDocumentData,\n    RxStorageStatics,\n    FilledMangoQuery,\n    PreparedQuery,\n    RxDocumentWriteData\n} from '../../types';\nimport {\n    flatClone,\n    isMaybeReadonlyArray\n} from '../../plugins/utils';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    schema: RxJsonSchema<any>;\n    compressedSchema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\nRxJsonSchema<any>,\nCompressionState\n> = new WeakMap();\n\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    /**\n     * Because we cache the state by the JsonSchema,\n     * it must be ausured that the given schema object\n     * is never mutated.\n     */\n    overwritable.deepFreezeWhenDevMode(schema);\n\n    let compressionState = COMPRESSION_STATE_BY_SCHEMA.get(schema);\n    if (!compressionState) {\n        const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n        delete (compressionSchema as any).primaryKey;\n\n        const table = createCompressionTable(\n            compressionSchema,\n            DEFAULT_COMPRESSION_FLAG,\n            [\n                /**\n                 * Do not compress the primary field\n                 * for easier debugging.\n                 */\n                getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n                '_rev',\n                '_attachments',\n                '_deleted',\n                '_meta'\n            ]\n        );\n\n        delete (compressionSchema as any).primaryKey;\n        const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n            table,\n            compressionSchema\n        ) as RxJsonSchema<any>;\n\n        // also compress primary key\n        if (typeof schema.primaryKey !== 'string') {\n            const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n            const newComposedPrimary: CompositePrimaryKey<any> = {\n                key: compressedPath(table, composedPrimary.key as string),\n                fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n                separator: composedPrimary.separator\n            };\n            compressedSchema.primaryKey = newComposedPrimary;\n        } else {\n            compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n        }\n\n        /**\n         * the key compression module does not know about indexes\n         * in the schema, so we have to also compress them here.\n         */\n        if (schema.indexes) {\n            const newIndexes = schema.indexes.map(idx => {\n                if (isMaybeReadonlyArray(idx)) {\n                    return idx.map(subIdx => compressedPath(table, subIdx));\n                } else {\n                    return compressedPath(table, idx);\n                }\n            });\n            compressedSchema.indexes = newIndexes;\n        }\n\n        compressionState = {\n            table,\n            schema,\n            compressedSchema\n        };\n        COMPRESSION_STATE_BY_SCHEMA.set(schema, compressionState);\n    }\n    return compressionState;\n}\n\nexport function wrappedKeyCompressionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    const statics: RxStorageStatics = Object.assign(\n        {},\n        args.storage.statics,\n        {\n            prepareQuery<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                mutateableQuery: FilledMangoQuery<RxDocType>\n            ): PreparedQuery<RxDocType> {\n                if (schema.keyCompression) {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    mutateableQuery = compressQuery(\n                        compressionState.table,\n                        mutateableQuery as any\n                    ) as any;\n                    return args.storage.statics.prepareQuery(\n                        compressionState.compressedSchema,\n                        mutateableQuery\n                    );\n                }\n                return args.storage.statics.prepareQuery(\n                    schema,\n                    mutateableQuery\n                );\n            },\n            getSortComparator<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                preparedQuery: PreparedQuery<RxDocType>\n            ): DeterministicSortComparator<RxDocType> {\n                if (!schema.keyCompression) {\n                    return args.storage.statics.getSortComparator(schema, preparedQuery);\n                } else {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    const comparator = args.storage.statics.getSortComparator(compressionState.schema, preparedQuery);\n                    return (a, b) => {\n                        const compressedDocDataA = compressObject(\n                            compressionState.table,\n                            a as any\n                        );\n                        const compressedDocDataB = compressObject(\n                            compressionState.table,\n                            b as any\n                        );\n                        const res = comparator(compressedDocDataA, compressedDocDataB);\n                        return res;\n                    };\n                }\n            },\n            getQueryMatcher<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                preparedQuery: PreparedQuery<RxDocType>\n            ): QueryMatcher<RxDocumentData<RxDocType>> {\n                if (!schema.keyCompression) {\n                    return args.storage.statics.getQueryMatcher(schema, preparedQuery);\n                } else {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    const matcher = args.storage.statics.getQueryMatcher(compressionState.schema, preparedQuery);\n                    return (docData) => {\n                        const compressedDocData = compressObject(\n                            compressionState.table,\n                            docData\n                        );\n                        const ret = matcher(compressedDocData);\n                        return ret;\n                    };\n                }\n            }\n        }\n    );\n\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            statics,\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!params.schema.keyCompression) {\n                    return args.storage.createStorageInstance(params);\n                }\n\n                const compressionState = getCompressionStateByRxJsonSchema(params.schema);\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    return compressDocumentData(compressionState, docData);\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    return decompressDocumentData(compressionState, docData);\n                }\n\n                /**\n                 * Because this wrapper resolves the key-compression,\n                 * we can set the flag to false\n                 * which allows underlying storages to detect wrong conficturations\n                 * like when keyCompression is set to false but no key-compression module is used.\n                 */\n                const childSchema = flatClone(compressionState.compressedSchema);\n                childSchema.keyCompression = false;\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: childSchema\n                        }\n                    )\n                );\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage\n                );\n            }\n        }\n    );\n}\n\nexport function compressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    /**\n     * Do not send attachments to compressObject()\n     * because it will deep clone which does not work on Blob or Buffer.\n     */\n    docData = flatCloneDocWithMeta(docData);\n    const attachments = docData._attachments;\n    delete docData._attachments;\n\n    docData = compressObject(\n        compressionState.table,\n        docData\n    );\n    docData._attachments = attachments;\n    return docData;\n}\n\nexport function decompressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    return decompressObject(\n        compressionState.table,\n        docData\n    );\n}\n"],"mappings":"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"}