{"version":3,"file":"event-reduce.js","names":["getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","has","collection","preparedQuery","getPreparedQuery","normalizedMangoQuery","normalizeMangoQuery","storageInstance","schema","clone","mangoQuery","primaryPath","sortComparator","database","storage","statics","getSortComparator","jsonSchema","useSortComparator","docA","docB","sortComparatorData","queryMatcher","getQueryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","set","get","calculateNewResults","rxChangeEvents","eventReduce","runFullQueryAgain","queryParams","previousResults","ensureNotFalsy","_result","docsData","slice","previousResultsMap","docsDataMap","changed","eventReduceEvents","cE","rxChangeEventToEventReduceChangeEvent","filter","arrayFilterNotEmpty","foundNonOptimizeable","find","eventReduceEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","calculateActionName","runAction","newResults"],"sources":["../../src/event-reduce.ts"],"sourcesContent":["import {\n    ActionName,\n    calculateActionName,\n    runAction,\n    QueryParams,\n    QueryMatcher,\n    DeterministicSortComparator,\n    StateResolveFunctionInput,\n    ChangeEvent\n} from 'event-reduce-js';\nimport type {\n    RxQuery,\n    MangoQuery,\n    RxChangeEvent,\n    PreparedQuery,\n    StringKeys,\n    RxDocumentData\n} from './types';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport { arrayFilterNotEmpty, clone, ensureNotFalsy } from './plugins/utils';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nexport type EventReduceResultNeg = {\n    runFullQueryAgain: true;\n};\nexport type EventReduceResultPos<RxDocumentType> = {\n    runFullQueryAgain: false;\n    changed: boolean;\n    newResults: RxDocumentType[];\n};\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\n\n\nexport function getSortFieldsOfQuery<RxDocType>(\n    primaryKey: StringKeys<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): (string | StringKeys<RxDocType>)[] {\n    if (!query.sort || query.sort.length === 0) {\n        return [primaryKey];\n    } else {\n        return query.sort.map(part => Object.keys(part)[0]);\n    }\n}\n\n\n\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\nexport function getQueryParams<RxDocType>(\n    rxQuery: RxQuery<RxDocType>\n): QueryParams<RxDocType> {\n    if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n        const collection = rxQuery.collection;\n        const preparedQuery: PreparedQuery<RxDocType> = rxQuery.getPreparedQuery();\n        const normalizedMangoQuery = normalizeMangoQuery(\n            collection.storageInstance.schema,\n            clone(rxQuery.mangoQuery)\n        );\n        const primaryKey = collection.schema.primaryPath;\n\n        /**\n         * Create a custom sort comparator\n         * that uses the hooks to ensure\n         * we send for example compressed documents to be sorted by compressed queries.\n         */\n        const sortComparator = collection.database.storage.statics.getSortComparator(\n            collection.schema.jsonSchema,\n            preparedQuery\n        );\n\n        const useSortComparator: DeterministicSortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\n            const sortComparatorData = {\n                docA,\n                docB,\n                rxQuery\n            };\n            return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n        };\n\n        /**\n         * Create a custom query matcher\n         * that uses the hooks to ensure\n         * we send for example compressed documents to match compressed queries.\n         */\n        const queryMatcher = collection.database.storage.statics.getQueryMatcher(\n            collection.schema.jsonSchema,\n            preparedQuery\n        );\n        const useQueryMatcher: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\n            const queryMatcherData = {\n                doc,\n                rxQuery\n            };\n            return queryMatcher(queryMatcherData.doc);\n        };\n\n        const ret: QueryParams<any> = {\n            primaryKey: rxQuery.collection.schema.primaryPath as any,\n            skip: normalizedMangoQuery.skip,\n            limit: normalizedMangoQuery.limit,\n            sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery) as string[],\n            sortComparator: useSortComparator,\n            queryMatcher: useQueryMatcher\n        };\n        RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n        return ret;\n    } else {\n        return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery) as QueryParams<RxDocType>;\n    }\n}\n\n\nexport function calculateNewResults<RxDocumentType>(\n    rxQuery: RxQuery<RxDocumentType>,\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\n): EventReduceResult<RxDocumentType> {\n    if (!rxQuery.collection.database.eventReduce) {\n        return {\n            runFullQueryAgain: true\n        };\n    }\n    const queryParams = getQueryParams(rxQuery);\n    const previousResults: RxDocumentType[] = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n    const previousResultsMap: Map<string, RxDocumentType> = ensureNotFalsy(rxQuery._result).docsDataMap;\n    let changed: boolean = false;\n\n    const eventReduceEvents: ChangeEvent<RxDocumentType>[] = rxChangeEvents\n        .map(cE => rxChangeEventToEventReduceChangeEvent(cE))\n        .filter(arrayFilterNotEmpty);\n    const foundNonOptimizeable = eventReduceEvents.find(eventReduceEvent => {\n        const stateResolveFunctionInput: StateResolveFunctionInput<RxDocumentType> = {\n            queryParams,\n            changeEvent: eventReduceEvent,\n            previousResults,\n            keyDocumentMap: previousResultsMap\n        };\n\n        const actionName: ActionName = calculateActionName(stateResolveFunctionInput);\n        if (actionName === 'runFullQueryAgain') {\n            return true;\n        } else if (actionName !== 'doNothing') {\n            changed = true;\n            runAction(\n                actionName,\n                queryParams,\n                eventReduceEvent,\n                previousResults,\n                previousResultsMap\n            );\n            return false;\n        }\n    });\n    if (foundNonOptimizeable) {\n        return {\n            runFullQueryAgain: true,\n        };\n    } else {\n        return {\n            runFullQueryAgain: false,\n            changed,\n            newResults: previousResults\n        };\n    }\n}\n"],"mappings":"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"}